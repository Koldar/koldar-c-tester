<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>Koldar C Tester: a simple C tester</title>
    <detaileddescription>
<sect1 id="index_1section01">
<title>Introduction</title>
<para>The KoldarCTester is a single header that can be used to quickly implement a test case for C code. C++ pure code is not supported though.</para></sect1>
<sect1 id="index_1section02">
<title>To All People who want to setup it quickly</title>
<para>If you&apos;re in a hurry and want to setup KoldarCTester now, here the basic example to make it work:</para><para><programlisting><codeline><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#include<sp/>&quot;KoldarCTester.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//All<sp/>test<sp/>function<sp/>must<sp/>have<sp/>no<sp/>formal<sp/>parameters<sp/>and<sp/>void<sp/>as<sp/>return<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testSomething(){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//code<sp/>something<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a!=5){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failMsg(</highlight><highlight class="stringliteral">&quot;a<sp/>is<sp/>not<sp/>5!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testSomethingElse(){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//code<sp/>something<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a&gt;4){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_addTest(testSomething);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_addTest(testSomethingElse);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_runAllTest(stdout);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="index_1section03">
<title>How to use KoldarCTester</title>
<para>Now that all the guys in a hurry are satisfied we can discuss how to correctly use this header. To use it you have to copy &quot;KoldarCTester.h&quot; within your header paths. After that you can create a new .c files that will be used as a single test suite: if you want more test suites, you&apos;ll have to create more .c files. A single test file .c is divided into 2 parts:<orderedlist>
<listitem><para>some test functions;</para></listitem><listitem><para>a main function;</para></listitem></orderedlist>
</para><para>Basically KoldarCTester is a function list manager: you create some function and then you use some header function to add them in a list. After that you can execute them all in one command: the header handles all the work for you. So, first of all, you can create a new file (call it TestInteger.c fro example) and include the header:</para><para><programlisting><codeline><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#include<sp/>&quot;KoldarCTester.h&quot;</highlight></codeline>
</programlisting></para><para>You have to be sure the header is inside in your &quot;include paths&quot; (maybe through the -I compiler directive) Secondly you have to create some test functions. For the example, I have created these:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>100<sp/>random<sp/>number<sp/>between<sp/>0<sp/>and<sp/>9<sp/>and<sp/>test<sp/>whether<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//not<sp/>the<sp/>upper<sp/>and<sp/>lower<sp/>bound<sp/>are<sp/>not<sp/>violated.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRandomX(){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;100;i++){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertExtremis(0,9,</highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight><highlight class="keyword">true</highlight><highlight class="normal">,rand()%10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Test<sp/>if<sp/>the<sp/>power<sp/>of<sp/>2<sp/>is<sp/>greater<sp/>than<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testPower(){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;100;i++){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num=rand()%100;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertCondition(num*num&gt;=0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para>Let&apos;s skip up for the moment the &quot;assertExtremis&quot; and &quot;assertCondition&quot; part. Now you have created all the test you need to verify some feature of your program. Now you need to run these; the main function does exactly that:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>tests<sp/>in<sp/>the<sp/>function<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_addTest(testRandomX);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_addTest(testPower);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//run<sp/>the<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_runAllTest(stdout);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para>Now you can build it. The compiler will probably complaints about &quot;addTest&quot; and &quot;kct_runAllTest&quot; do nothings: don&apos;t trust him, these function are actually pretty useful! Now try to run the program: you should get something like this:</para><para><image type="html" name="image01.png"></image>
</para><para>The tests are stored in a list: though it might be not so fast (like Bjame Stroudtrup say in <ulink url="http://www.youtube.com/watch?v=YQs6IC-vgmo">http://www.youtube.com/watch?v=YQs6IC-vgmo</ulink>), the list are quite easy to understand even for programmers beginner, so everyone can improve freely the header. Moreover, unlike other test suite, this header is totally *free of memory leak*. Sure, you can say: &quot;well, that&apos;s should be obvious!&quot;; well, of course it is, but you&apos;ll never know what you download out in the internet.</para></sect1>
<sect1 id="index_1section04">
<title>Basic Elements in the header</title>
<para>In the header there are basically important elements:<orderedlist>
<listitem><para>assertions;</para></listitem><listitem><para>function kct_addTest();</para></listitem><listitem><para>function kct_addTestImproved();</para></listitem><listitem><para>function kct_runAllTest();</para></listitem><listitem><para>variable currentTest;</para></listitem><listitem><para>variable testList;</para></listitem></orderedlist>
</para><para>&quot;testList&quot; variable represents the list that will store the functions and some other data.</para><para>&quot;currentTest&quot; is the test that is running at the moment; it is mainly used to lighten the prototype of the function: in this way the developer can *focus* on the test development insted of wasting time on understand the testing suite.</para><para>kct_addTest() is the main function used to add a function in the list.</para><para>kct_addTestImproved() has the same aim of kct_addTest but with this function you can also specify whether or not you want to skip the function.</para><para>kct_runAllTest() is obviously used to execute the test. Note that with this function the list is automatically deallocated from the heap: in this way, if you are testing memory leak in your code, Koldar C Tester will not produces memory leaks by himself.</para></sect1>
<sect1 id="index_1section05">
<title>Assertion</title>
<para>As we have introduce in the previous section, one of the most important things in the header are assertions. Assertions are shortcuts to test some conditions: if the condition is met nothing happens; otherwise the test is terminate and the header alerts you that in the specific test something went wrong.</para><para>For example, let assume you want to determinate if a pointer to a FILE returned by fopen is NULL or not. Normally you do something like this:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE*<sp/>f=fopen(</highlight><highlight class="stringliteral">&quot;../test/fileToParse.txt&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f==NULL){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Cannot<sp/>open<sp/>the<sp/>file!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para>This works, but if you have lots of these small control your code readability can substantly decrease. Assert helps you in that:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE*<sp/>f=fopen(</highlight><highlight class="stringliteral">&quot;../test/fileToParse.txt&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertNotNullMsg(</highlight><highlight class="stringliteral">&quot;cannot<sp/>open<sp/>the<sp/>file!\n&quot;</highlight><highlight class="normal">,f);</highlight></codeline>
</programlisting></para><para>Smaller and more readable, right? Koldar C Tester let you use a lot of these assertions: you can read about all of them in the documentation! Generally speaking, however, assertion are divided into 2 strains:</para><para><itemizedlist>
<listitem><para><bold>pure assertions</bold> check only a particular condition;</para></listitem><listitem><para><bold>message assertion</bold> check a particular condition and if it is not met they warn you with an error message</para></listitem></itemizedlist>
</para></sect1>
<sect1 id="index_1section06">
<title>Skip tests</title>
<para>Let assume you have 100 tests regarding a particular big feature of your program. It is probable that, to execute all 100 tests, your computer needs some time. If you are sure that some tests (i.e 53 and 67) return a OK status, you might want to skip them, for not wasting time. Well, you can easily do that using kct_addTestImproved(someTest,false):</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_addTestImproved(test51,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_addTestImproved(test52,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_addTestImproved(test53,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_addTestImproved(test54,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_addTestImproved(test55,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para><para>While the first parameter is again the test function the second parameter indicates whether or not the computer should actually run the test: when you want to reexecute the function you can change &quot;false&quot; to &quot;true&quot;.</para><para>Sure, you can just comment out the particular &quot;kct_addTest(test53);&quot; line, but the header let you also handle the skip in this way.</para><para>Some notes about how skipping tests influence the result outcomes:<orderedlist>
<listitem><para>the ratio successful tests/Number of tests does count the skipped tests;</para></listitem><listitem><para>the ratio failed tests/Number of tests does count the skipped tests;</para></listitem><listitem><para>the percentage of successful tests does not count skipped tests;</para></listitem><listitem><para>the percentage of failed tests does not count skipped tests;</para></listitem></orderedlist>
</para><para>This means that the percentage of successful tests <bold>must always be 100%</bold>: if it isn&apos;t, then some tests aren&apos;t working. On the other hand the percentage of failed tests <bold>must always be 0%</bold>.</para><para><simplesect kind="date"><para>Nov 27, 2013 </para></simplesect>
<simplesect kind="author"><para>koldar </para></simplesect>
<simplesect kind="version"><para>1.0 </para></simplesect>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
