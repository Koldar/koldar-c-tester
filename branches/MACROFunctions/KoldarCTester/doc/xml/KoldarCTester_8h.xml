<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="KoldarCTester_8h" kind="file">
    <compoundname>KoldarCTester.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="1">
        <label>stdbool.h</label>
      </node>
      <node id="0">
        <label>koldarCtester/KoldarCTester.h</label>
        <link refid="KoldarCTester.h"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structTestListElement" prot="public">TestListElement</innerclass>
    <innerclass refid="structTestList" prot="public">TestList</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="KoldarCTester_8h_1a7d6e1cf1a8d53f38471e9e9db3faf740" prot="public" static="no">
        <name>__func__</name>
        <initializer>&quot;&lt;unknown&gt;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="227" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a5f792115dc3f1978a91f1071e2fdb9d2" prot="public" static="no">
        <name>KCT_TESTSEPARATOR</name>
        <initializer>&quot;**************&quot;</initializer>
        <briefdescription>
<para>Represents the string that separates 2 test function in the output. </para>        </briefdescription>
        <detaileddescription>
<para>* This macro controls the string separator between 2 test function. THe default one is the string &quot;**************&quot; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="239" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1ab00769d769cf83d9deff75b96a040993" prot="public" static="no">
        <name>PRIVATE_KCT_FAIL</name>
        <initializer>0</initializer>
        <briefdescription>
<para>represents the outcome of a test function </para>        </briefdescription>
        <detaileddescription>
<para>The outcome of a test function can be: -* MCT_SUCCESS: the test has ended successfully; -* MCT_FAIL: something has gone wrong in the test; -* MCT_SKIPPED: the test was in the list but it was commanded to skip it; -* MCT_UNKNOWN: The initial value of the field &quot;result&quot; for every test function that has not already been executedRepresents the outcome of a test function when the test utterly fails </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="255" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1aa4b3f93f586198c0a63749d74f34afd4" prot="public" static="no">
        <name>PRIVATE_KCT_SUCCESS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Represents the outcome of a test function when the test terminates successfully. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="258" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1ad838fa7c43ef0a11f89440526a32c5f3" prot="public" static="no">
        <name>PRIVATE_KCT_SKIPPED</name>
        <initializer>2</initializer>
        <briefdescription>
<para>Represents the outcome of a test function when the test was to be skipped. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="261" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1aca3d9dd0d02aa557315a4ea065e668f4" prot="public" static="no">
        <name>PRIVATE_KCT_UNKNOWN</name>
        <initializer>3</initializer>
        <briefdescription>
<para>Represents the outcome of a test function that has not yet been executed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="264" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a6ce1deab2588c7f98556cba1cc0e798e" prot="public" static="no">
        <name>PRIVATE_KCT_COPYSTRING</name>
        <param><defname>destinationpointer</defname></param>
        <param><defname>constantString</defname></param>
        <initializer>destinationpointer=malloc(strlen(constantString)+1); \
	if (destinationpointer==NULL){ \
		fprintf(stderr,&quot;MaxTester.h:PRIVATE_KCT_COPYSTRING:not enough memory\n&quot;); \
		exit -1; \
	} \
	strcpy((char*)destinationpointer,constantString)</initializer>
        <briefdescription>
<para>copy a string in another one </para>        </briefdescription>
        <detaileddescription>
<para>It it highly suggested that constantString is a constant String or a simple variable. It is not recommended to use as &quot;constantString&quot; a call to a function because it might decrease performances.</para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>destinationpointer has not already been initialized with malloc; </para></listitem>
<listitem><para>destinationpointer has to be of type char*; </para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="post"><para><itemizedlist>
<listitem><para>the string in constantString is copied in the heap a the addres destinationpointer</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[char*]destinationpointer</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer where the copy of the stirng will be copied </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[char*]constantString</parametername>
</parameternamelist>
<parameterdescription>
<para>the original string </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="356" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a8e11e08dae8a81dd88ea867a2650f164" prot="public" static="no">
        <name>PRIVATE_KCT_INITTESTLIST</name>
        <param><defname>list</defname></param>
        <initializer>list=malloc(sizeof(<ref refid="structTestList" kindref="compound">TestList</ref>)); \
	if (list==NULL){ \
		fprintf(stderr,&quot;MaxTester.c:initTestList:1:Not enough memory\n&quot;); \
		exit -1; \
	} \
	list-&gt;head=NULL; \
	list-&gt;tail=NULL; \
	list-&gt;size=0</initializer>
        <briefdescription>
<para>constructs an empty test list </para>        </briefdescription>
        <detaileddescription>
<para>It is highly recommended that you put in list a single variable, not a function returning a TestList*</para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>list *has* to be of type TestList* </para></listitem>
<listitem><para>list has not been initialized with malloc </para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="post"><para><itemizedlist>
<listitem><para>an empty testlist is allocated in the memory </para></listitem>
<listitem><para>the head of the list is NULL; </para></listitem>
<listitem><para>the tail of the list is NULL; </para></listitem>
<listitem><para>the size of the list is 0;</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[TestList*]</parametername>
</parameternamelist>
<parameterdescription>
<para>construct a new <ref refid="structTestList" kindref="compound">TestList</ref> and store its pointer in this very parameter </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="382" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a80ef5404b6dbbc96e005228ead0fc158" prot="public" static="no">
        <name>PRIVATE_KCT_INITTESTLISTELEMENT</name>
        <param><defname>element</defname></param>
        <param><defname>_function</defname></param>
        <param><defname>_description</defname></param>
        <param><defname>toberun</defname></param>
        <initializer>element=malloc(sizeof(<ref refid="structTestListElement" kindref="compound">TestListElement</ref>)); \
	if (element==NULL){ \
		fprintf(stderr,&quot;KoldarCTester.h:PRIVATE_KCT_INITTESTLISTELEMENT:not enough memory&quot;); \
		exit -1; \
	} \
	element-&gt;testFunction=_function; \
	PRIVATE_KCT_COPYSTRING(element-&gt;description,_description); \
	element-&gt;errorMessage=NULL; \
	element-&gt;result=PRIVATE_KCT_UNKNOWN; \
	element-&gt;skip=!toberun; \
	element-&gt;next=NULL</initializer>
        <briefdescription>
<para>Create a new <ref refid="structTestListElement" kindref="compound">TestListElement</ref> in the memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>element has to be of type TestListElement*; </para></listitem>
<listitem><para>element has not already been initialized with malloc; </para></listitem>
<listitem><para>element must be a simple variable (i.e. a,list); </para></listitem>
<listitem><para>testdescription has to be a constant string, like &quot;hello&quot;; </para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="post"><para><itemizedlist>
<listitem><para>a new <ref refid="structTestListElement" kindref="compound">TestListElement</ref> is allocated in the heap; </para></listitem>
<listitem><para>the field &quot;result&quot; of the newly created <ref refid="structTestListElement" kindref="compound">TestListElement</ref> is KCT_UNKNWON; </para></listitem>
<listitem><para>the field &quot;errorMessage&quot; of the newly created <ref refid="structTestListElement" kindref="compound">TestListElement</ref> is NULL;</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[TestListElement*]element</parametername>
</parameternamelist>
<parameterdescription>
<para>a uninitialized pointer of <ref refid="structTestListElement" kindref="compound">TestListElement</ref> that will be used to point the new structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[TestFunction]_function</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer name of the function that will be used as a test function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[char*]_description</parametername>
</parameternamelist>
<parameterdescription>
<para>a string representing the description of the test; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[bool]toberun</parametername>
</parameternamelist>
<parameterdescription>
<para>TRUE if you want to actually use this test during the test run, FALSE if you want to be added to the list but you want to skip it </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="414" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1ade3d8352d0d6048762450c2a7627f0c0" prot="public" static="no">
        <name>PRIVATE_KCT_ADDTESTCASE</name>
        <param><defname>_list</defname></param>
        <param><defname>_test</defname></param>
        <param><defname>_description</defname></param>
        <param><defname>_toberun</defname></param>
        <initializer>{ \
	<ref refid="structTestListElement" kindref="compound">TestListElement</ref>* newadd; \
	PRIVATE_KCT_INITTESTLISTELEMENT(newadd,_test,_description,_toberun); \
	if (_list-&gt;head==NULL){ \
		_list-&gt;head=newadd; \
		_list-&gt;tail=newadd; \
	}else { \
		_list-&gt;tail-&gt;next=newadd; \
		_list-&gt;tail=newadd; \
	} \
	_list-&gt;size++; \
}</initializer>
        <briefdescription>
<para>adds a new test function in the test list </para>        </briefdescription>
        <detaileddescription>
<para>The variable list is best not to be a complex formula, but a simple variable: in this way the macro function is way quicker</para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>_test is already been declared </para></listitem>
<listitem><para>_list of type TestList* </para></listitem>
<listitem><para>_test is of type TestFunction </para></listitem>
<listitem><para>_description is a char* </para></listitem>
<listitem><para>_toberun is a bool </para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="post"><para><itemizedlist>
<listitem><para>_test function is stored in the test list </para></listitem>
<listitem><para>_errormessage field is set to NULL</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[TestList*]_list</parametername>
</parameternamelist>
<parameterdescription>
<para>the test list where to add the test function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[TestFunction]_test</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to be added in the test list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[char*]_description</parametername>
</parameternamelist>
<parameterdescription>
<para>a brief description of what the test verifies. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[bool]_toberun</parametername>
</parameternamelist>
<parameterdescription>
<para><itemizedlist>
<listitem><para>TRUE if you want to insert the testcase in the list and execute it; </para></listitem>
<listitem><para>FALSE if you want to insert the testcase in the list but you want it to skip it; </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="449" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a34a2fcc3214b6281c924261e1745e80c" prot="public" static="no">
        <name>PRIVATE_KCT_FREETESTLIST</name>
        <param><defname>_list</defname></param>
        <initializer>{ \
	<ref refid="structTestListElement" kindref="compound">TestListElement</ref>* tofree=_list-&gt;head; \
	<ref refid="structTestListElement" kindref="compound">TestListElement</ref>* next; \
	while (tofree!=NULL){ \
		next=tofree-&gt;next; \
		free((char*)tofree-&gt;description); \
		free((char*)tofree-&gt;errorMessage); \
		free(tofree); \
		tofree=next; \
	} \
	free(_list); \
}</initializer>
        <briefdescription>
<para>free the memory occupied by the list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>_list not NULL; </para></listitem>
<listitem><para>_list is of type TestList*; </para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="post"><para><itemizedlist>
<listitem><para>the memory allocated to every <ref refid="structTestListElement" kindref="compound">TestListElement</ref> pointed by the list is freed.</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[TestList*]list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list to be freed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="472" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="461" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1aab3cd05e31c5338e1ff39b821819280d" prot="public" static="no">
        <name>PRIVATE_KCT_RUNALLTEST</name>
        <param><defname>_f</defname></param>
        <param><defname>_list</defname></param>
        <param><defname>_postDelete</defname></param>
        <initializer>{ \
	<ref refid="structTestListElement" kindref="compound">TestListElement</ref>* testToRun=_list-&gt;head; \
	int testnumber; \
	int oktest; \
	int skiptest; \
	int failtest; \
	while (testToRun!=NULL){ \
		if (testToRun-&gt;skip==true){ \
			testToRun-&gt;result=PRIVATE_KCT_SKIPPED; \
			testToRun=testToRun-&gt;next; \
			continue; \
		} \
		currentTest=testToRun; \
		fprintf(_f,&quot;%s TEST \&quot;%s\&quot; %s\n&quot;,KCT_TESTSEPARATOR,testToRun-&gt;description,KCT_TESTSEPARATOR); \
		fprintf(_f,&quot;\n&quot;); \
		testToRun-&gt;testFunction(); \
		if (testToRun-&gt;result == PRIVATE_KCT_UNKNOWN){ \
			testToRun-&gt;result=PRIVATE_KCT_SUCCESS; \
		}else { \
			fprintf(_f,&quot;!!!ERROR!!! \&quot;%s\&quot;\n&quot;,testToRun-&gt;errorMessage); \
		} \
		fprintf(_f,&quot;\n&quot;); \
		testToRun=testToRun-&gt;next; \
	} \
	fprintf(_f,&quot;%s FINAL RESULTS %s\n&quot;,KCT_TESTSEPARATOR,KCT_TESTSEPARATOR); \
	fprintf(_f,&quot;\n&quot;); \
	testToRun=_list-&gt;head; \
	testnumber=1; \
	oktest=0; \
	failtest=0; \
	skiptest=0; \
	while (testToRun!=NULL){ \
		fprintf(_f,&quot;%i) %s\t&quot;,testnumber,testToRun-&gt;description); \
		switch (testToRun-&gt;result){ \
		case PRIVATE_KCT_SUCCESS: { \
			fprintf(_f,&quot;SUCCESS&quot;); \
			oktest++; \
			break; \
		} \
		case PRIVATE_KCT_FAIL: { \
			fprintf(_f,&quot;FAIL&quot;); \
			failtest++; \
			break; \
		} \
		case PRIVATE_KCT_SKIPPED: { \
			skiptest++; \
			fprintf(_f,&quot;SKIPPED&quot;); \
			break; \
		} \
		case PRIVATE_KCT_UNKNOWN: { \
			fprintf(_f,&quot;UNKNOWN&quot;); \
			break; \
		} \
		} \
		fprintf(_f,&quot;\n&quot;); \
		testToRun=testToRun-&gt;next; \
		testnumber++; \
	} \
	fprintf(_f,&quot;\n&quot;); \
	fprintf(_f,&quot;OK\t%d/%d %%run %2.3f\n&quot;,oktest,_list-&gt;size,(oktest*100.00)/(_list-&gt;size-skiptest)); \
	fprintf(_f,&quot;FAIL\t%d/%d %%run %2.3f\n&quot;,failtest,_list-&gt;size,(failtest*100.00)/(_list-&gt;size-skiptest)); \
	fprintf(_f,&quot;SKIPPED\t%d/%d\n&quot;,skiptest,_list-&gt;size); \
	if (_postDelete){ \
		PRIVATE_KCT_FREETESTLIST(_list); \
		_list=NULL; \
	} \
}</initializer>
        <briefdescription>
<para>run all the test in the list </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>_f open in write mode; </para></listitem>
<listitem><para>_list not NULL; </para></listitem>
<listitem><para>_f is of type FILE*; </para></listitem>
<listitem><para>_list is of type TestList*; </para></listitem>
<listitem><para>_postDelete is of type bool; </para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="post"><para><itemizedlist>
<listitem><para>all the tests which have &quot;skip&quot; flag set to FALSE are run</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[FILE*]_f</parametername>
</parameternamelist>
<parameterdescription>
<para>the file to write the output on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[TestList*]_list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list holding the various test functions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[bool]_postDelete</parametername>
</parameternamelist>
<parameterdescription>
<para><itemizedlist>
<listitem><para>TRUE if you want to automatically call clearTestCase() function at the end of the test functions; </para></listitem>
<listitem><para>FALSE otherwise; </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="557" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="491" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a8b21af1302fae84b59f07b2b8964a64e" prot="public" static="no">
        <name>kct_addTestImproved</name>
        <param><defname>function</defname></param>
        <param><defname>torun</defname></param>
        <initializer>if (testList==NULL){ \
		PRIVATE_KCT_INITTESTLIST(testList); \
	} \
	PRIVATE_KCT_ADDTESTCASE(testList,function,#function,torun)</initializer>
        <briefdescription>
<para>adds a new function in the test list </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>function has already been defined; </para></listitem>
<listitem><para>function must have no formal parameters; </para></listitem>
<listitem><para>function must return a void type; </para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="post"><para><itemizedlist>
<listitem><para>the function is inside the test list</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[TestFunction]function</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to include in the test list; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[bool]torun</parametername>
</parameternamelist>
<parameterdescription>
<para>TRUE is you want to actually run the test, FALSE if you want to include it in the list but you want to skip it </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="591" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="587" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a5e05020cd2cbf6ef54e4abb4c5d3ca57" prot="public" static="no">
        <name>kct_addTest</name>
        <param><defname>function</defname></param>
        <initializer>kct_addTestImproved(function,true)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="595" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="594" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1ac8a6b69e2336189f749c385c0f753bc6" prot="public" static="no">
        <name>kct_runAllTest</name>
        <param><defname>outputfile</defname></param>
        <initializer>PRIVATE_KCT_RUNALLTEST(outputfile,testList,true)</initializer>
        <briefdescription>
<para>run all the test added to the test list. </para>        </briefdescription>
        <detaileddescription>
<para>The function run all the tests which has been added to the test list. You can add test function in the test list with the function kct_addTest(). Not all the tests will be run, but onyly those tests which are appended with the flag &quot;torun&quot; set to &quot;TRUE&quot;</para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>outputfile open in write mode </para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="post"><para><itemizedlist>
<listitem><para>test outcome is appended to the outputfile</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[FILE*]outputfile</parametername>
</parameternamelist>
<parameterdescription>
<para>where to write the test outcome </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="612" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="611" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a73a3b169ac8c3419cbe15327e75ffcfd" prot="public" static="no">
        <name>fail</name>
        <param></param>
        <initializer>currentTest-&gt;result=PRIVATE_KCT_FAIL; \
	return;</initializer>
        <briefdescription>
<para>Terminate the test and set the result of it as a failure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="619" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="617" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a209c6676a57ca98e38a1b574315429b9" prot="public" static="no">
        <name>failMsg</name>
        <param><defname>message</defname></param>
        <initializer>currentTest-&gt;errorMessage=copyString(message);\
	currentTest-&gt;result=PRIVATE_KCT_FAIL; \
	return;</initializer>
        <briefdescription>
<para>Terminate the test and set the result of it as a failure. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[char*]message</parametername>
</parameternamelist>
<parameterdescription>
<para>represents the message to display just before the ending of the test. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="630" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="627" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a1d4427d5d298067723eafeda7cded700" prot="public" static="no">
        <name>ok</name>
        <param></param>
        <initializer>currentTest-&gt;result=PRIVATE_KCT_SUCCESS; \
	return;</initializer>
        <briefdescription>
<para>terminates successfully the current test </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="637" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="635" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a17d884cdbaa807ffc03f40f679a42cec" prot="public" static="no">
        <name>assertCondition</name>
        <param><defname>condition</defname></param>
        <initializer>if ((condition)==false){ \
		fail(); \
	}</initializer>
        <briefdescription>
<para>end the test as a failure if the condition is *not* met </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>represents the condition to be tested </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="647" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="644" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1abb74c94e7f6d153f4ded134ed95d061d" prot="public" static="no">
        <name>assertConditionMsg</name>
        <param><defname>condition</defname></param>
        <param><defname>message</defname></param>
        <initializer>if ((condition)==false){ \
		failMsg(message); \
	}</initializer>
        <briefdescription>
<para>end the test as a failure if the condition IS *not* met </para>        </briefdescription>
        <detaileddescription>
<para>In addition to end the test if condition is *not* met, this function will display an error message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>represents the condition to be test </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[char*]message</parametername>
</parameternamelist>
<parameterdescription>
<para>represents the error message to be display if the condition is not met </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="661" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="658" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1aa9475d85030b6c21adb3b7700654bb81" prot="public" static="no">
        <name>assertNotCondition</name>
        <param><defname>condition</defname></param>
        <initializer>if ((condition)==true){ \
		fail(); \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="667" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="664" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a0405f963b0b16dc01673b125b4bbcfb0" prot="public" static="no">
        <name>assertNotConditionMsg</name>
        <param><defname>condition</defname></param>
        <param><defname>message</defname></param>
        <initializer>if ((condtion)==true){ \
		failMsg(message); \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="673" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a6194f22f7d84b391c4d76e30e7af3bae" prot="public" static="no">
        <name>assertEqual</name>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer>if (expected!=actual) { \
		return false; \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="679" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="676" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1ac539a372cbd8c5441cc897015144e1d8" prot="public" static="no">
        <name>assertEqualMsg</name>
        <param><defname>message</defname></param>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer>if (expected!=actual){ \
		failMsg(message); \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="685" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="682" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1ab955236528d43534c5864c14f8774a37" prot="public" static="no">
        <name>assertNotEqual</name>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer>if (expected==actual) { \
		fail(); \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="691" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="688" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a45f80ea97c60284039cef4e67e100036" prot="public" static="no">
        <name>assertNotEqualMsg</name>
        <param><defname>message</defname></param>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer>if (expected==actual) { \
		failMsg(message); \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="697" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="694" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1ae9d12e6e0343d1fd18ba98a75844eb78" prot="public" static="no">
        <name>assertNotNull</name>
        <param><defname>pointer</defname></param>
        <initializer>if (pointer==NULL){ \
		fail(); \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="703" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="700" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a8d27073faf5e6dfd8b0e0f1571ae0fdf" prot="public" static="no">
        <name>assertNotNullMsg</name>
        <param><defname>message</defname></param>
        <param><defname>pointer</defname></param>
        <initializer>if (pointer==NULL){ \
		failMsg(message); \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="709" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="706" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a60b5dd256b5340cc46134b74ab0a4964" prot="public" static="no">
        <name>assertExtremis</name>
        <param><defname>lowerbound</defname></param>
        <param><defname>upperbound</defname></param>
        <param><defname>lowin</defname></param>
        <param><defname>upin</defname></param>
        <param><defname>actual</defname></param>
        <initializer>if (actual&lt;lowerbound){ \
		fail(); \
	} \
	if (actual&gt;upperbound){ \
		fail(); \
	} \
	if ((lowin==false)&amp;&amp;(actual==lowerbound)){ \
		fail(); \
	} \
	if ((upin==false)&amp;&amp;(actual==upperbound)) { \
		fail(); \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="724" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="712" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1aa5c855e94213cc554853a27ed68444a8" prot="public" static="no">
        <name>assertExtremisMsg</name>
        <param><defname>message</defname></param>
        <param><defname>lowerbound</defname></param>
        <param><defname>upperbound</defname></param>
        <param><defname>lowin</defname></param>
        <param><defname>upin</defname></param>
        <param><defname>actual</defname></param>
        <initializer>if (actual&lt;lowerbound){ \
		failMsg(message); \
	} \
	if (actual&gt;upperbound){ \
		failMsg(message); \
	} \
	if ((lowin==false)&amp;&amp;(actual==lowerbound)){ \
		failMsg(message); \
	} \
	if ((upin==false)&amp;&amp;(actual==upperbound)) { \
		failMsg(message); \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="739" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="727" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="KoldarCTester_8h_1aa988ee461e7b20b71ccefb4e79ccfcbf" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* TestFunction)(void)</definition>
        <argsstring>)(void)</argsstring>
        <name>TestFunction</name>
        <briefdescription>
<para>type of a generic test function. </para>        </briefdescription>
        <detaileddescription>
<para>Every test function that has to be added as a test function must have the following prototype: -* no formal parameters; -* return type of type "void; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="272" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="KoldarCTester_8h_1aa212380198b0a2dca25d3d1018fad849" prot="public" static="no">
        <type>struct <ref refid="structTestListElement" kindref="compound">TestListElement</ref></type>
        <definition>typedef struct TestListElement  TestListElement</definition>
        <argsstring></argsstring>
        <name>TestListElement</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="310"/>
      </memberdef>
      <memberdef kind="typedef" id="KoldarCTester_8h_1acc89d326a9fedaf2a14a7ffe63469991" prot="public" static="no">
        <type>struct <ref refid="structTestList" kindref="compound">TestList</ref></type>
        <definition>typedef struct TestList  TestList</definition>
        <argsstring></argsstring>
        <name>TestList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="332"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="KoldarCTester_8h_1a44b6f03c5a8ee29e943e9ae44c4e5faa" prot="public" static="no" mutable="no">
        <type><ref refid="structTestList" kindref="compound">TestList</ref> *</type>
        <definition>TestList* testList</definition>
        <argsstring></argsstring>
        <name>testList</name>
        <initializer>NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents the list holding every test. This variable is used to simplify the MACRO prototype </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="563" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="563" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="KoldarCTester_8h_1a60c5089114599af5f1714400c691fb05" prot="public" static="yes" mutable="no">
        <type><ref refid="structTestListElement" kindref="compound">TestListElement</ref> *</type>
        <definition>TestListElement* currentTest</definition>
        <argsstring></argsstring>
        <name>currentTest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents the test which is currently running </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" line="571" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h" bodystart="571" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="211"><highlight class="preprocessor">#ifndef<sp/>KOLDARCTESTER_H_</highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>KOLDARCTESTER_H_</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>as<sp/>suggested<sp/>in<sp/>the<sp/>gcc<sp/>manual<sp/>http://gcc.gnu.org/onlinedocs/gcc/Function-Names.html</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/>I<sp/>have<sp/>added<sp/>this<sp/>preprocessorn<sp/>commands<sp/>to<sp/>increase<sp/>portability<sp/>of<sp/>the<sp/>code<sp/>in<sp/>order</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>to<sp/>get<sp/>a<sp/>function<sp/>name.</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__STDC_VERSION__<sp/>&lt;<sp/>199901L</highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>__GNUC__<sp/>&gt;=<sp/>2</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>__func__<sp/>__FUNCTION__</highlight></codeline>
<codeline lineno="226"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>__func__<sp/>&quot;&lt;unknown&gt;&quot;</highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>endif</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="235"><highlight class="preprocessor">#ifndef<sp/>KCT_CONTROLMACRO_TESTSEPARATOR</highlight></codeline>
<codeline lineno="236"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="239"><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>KCT_TESTSEPARATOR<sp/>&quot;**************&quot;</highlight></codeline>
<codeline lineno="240"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="241"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>KCT_TESTSEPARATOR<sp/>KCT_CONTROLMACRO_TESTSEPARATOR</highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="243"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="255"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_FAIL<sp/>0</highlight></codeline>
<codeline lineno="256"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="258"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_SUCCESS<sp/>1</highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="261"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_SKIPPED<sp/>2</highlight></codeline>
<codeline lineno="262"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="264"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_UNKNOWN<sp/>3</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="272"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*TestFunction)(void);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="structTestListElement" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structTestListElement" kindref="compound" tooltip="Defines a single element of the list.">TestListElement</ref><sp/>{</highlight></codeline>
<codeline lineno="282" refid="structTestListElement_1a1548cde8fcea08f7502edcedf45eaea5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestFunction<sp/><ref refid="structTestListElement_1a1548cde8fcea08f7502edcedf45eaea5" kindref="member" tooltip="the test case in the particular cell of the list">testFunction</ref>;</highlight></codeline>
<codeline lineno="286" refid="structTestListElement_1a9d7977e41f0e74d6ac372d248bbe23df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structTestListElement_1a9d7977e41f0e74d6ac372d248bbe23df" kindref="member" tooltip="points to a brief description of what the test does">description</ref>;</highlight></codeline>
<codeline lineno="293" refid="structTestListElement_1af1ac1303fdb0631c26c1c796bcdeb93b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structTestListElement_1af1ac1303fdb0631c26c1c796bcdeb93b" kindref="member" tooltip="represents the string to be filled with an error message.">errorMessage</ref>;</highlight></codeline>
<codeline lineno="300" refid="structTestListElement_1afc6f3d2eb2a6da34bf690f12c07b11dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="structTestListElement_1afc6f3d2eb2a6da34bf690f12c07b11dd" kindref="member" tooltip="holds the result of the test.">result</ref>;</highlight></codeline>
<codeline lineno="305" refid="structTestListElement_1aed8e6f8c8766aae69299fe2b8f951999" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structTestListElement_1aed8e6f8c8766aae69299fe2b8f951999" kindref="member" tooltip="controls whether or not you want to skip this test">skip</ref>;</highlight></codeline>
<codeline lineno="309" refid="structTestListElement_1a9c677e75182a00d31810530641ed942c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structTestListElement" kindref="compound" tooltip="Defines a single element of the list.">TestListElement</ref>*<sp/><ref refid="structTestListElement_1a9c677e75182a00d31810530641ed942c" kindref="member" tooltip="points to the next test function">next</ref>;</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}<sp/><ref refid="structTestListElement" kindref="compound" tooltip="Defines a single element of the list.">TestListElement</ref>;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="structTestList" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structTestList" kindref="compound" tooltip="Represents the entire list of test functions.">TestList</ref><sp/>{</highlight></codeline>
<codeline lineno="322" refid="structTestList_1a731a61bf04a73bc32bee5d9061bcc2af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structTestListElement" kindref="compound" tooltip="Defines a single element of the list.">TestListElement</ref>*<sp/><ref refid="structTestList_1a731a61bf04a73bc32bee5d9061bcc2af" kindref="member" tooltip="represents the first element of the list.">head</ref>;</highlight></codeline>
<codeline lineno="327" refid="structTestList_1aa66fa1d67e4be5ef572cda8f114732b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structTestListElement" kindref="compound" tooltip="Defines a single element of the list.">TestListElement</ref>*<sp/><ref refid="structTestList_1aa66fa1d67e4be5ef572cda8f114732b9" kindref="member" tooltip="represents the last element of the list.">tail</ref>;</highlight></codeline>
<codeline lineno="331" refid="structTestList_1a2a83f8e89d7e7446ffaad68a82e884b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structTestList_1a2a83f8e89d7e7446ffaad68a82e884b1" kindref="member" tooltip="the number of the total test functions in the list">size</ref>;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}<sp/><ref refid="structTestList" kindref="compound" tooltip="Represents the entire list of test functions.">TestList</ref>;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_COPYSTRING(destinationpointer,constantString)<sp/>\</highlight></codeline>
<codeline lineno="351"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destinationpointer=malloc(strlen(constantString)+1);<sp/>\</highlight></codeline>
<codeline lineno="352"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(destinationpointer==NULL){<sp/>\</highlight></codeline>
<codeline lineno="353"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,&quot;MaxTester.h:PRIVATE_KCT_COPYSTRING:not<sp/>enough<sp/>memory\n&quot;);<sp/>\</highlight></codeline>
<codeline lineno="354"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>-1;<sp/>\</highlight></codeline>
<codeline lineno="355"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="356"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy((char*)destinationpointer,constantString)</highlight></codeline>
<codeline lineno="357"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="374"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_INITTESTLIST(list)<sp/>\</highlight></codeline>
<codeline lineno="375"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list=malloc(sizeof(TestList));<sp/>\</highlight></codeline>
<codeline lineno="376"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(list==NULL){<sp/>\</highlight></codeline>
<codeline lineno="377"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,&quot;MaxTester.c:initTestList:1:Not<sp/>enough<sp/>memory\n&quot;);<sp/>\</highlight></codeline>
<codeline lineno="378"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>-1;<sp/>\</highlight></codeline>
<codeline lineno="379"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="380"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list-&gt;head=NULL;<sp/>\</highlight></codeline>
<codeline lineno="381"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list-&gt;tail=NULL;<sp/>\</highlight></codeline>
<codeline lineno="382"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list-&gt;size=0</highlight></codeline>
<codeline lineno="383"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="403"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_INITTESTLISTELEMENT(element,_function,_description,toberun)<sp/>\</highlight></codeline>
<codeline lineno="404"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element=malloc(sizeof(TestListElement));<sp/>\</highlight></codeline>
<codeline lineno="405"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(element==NULL){<sp/>\</highlight></codeline>
<codeline lineno="406"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,&quot;KoldarCTester.h:PRIVATE_KCT_INITTESTLISTELEMENT:not<sp/>enough<sp/>memory&quot;);<sp/>\</highlight></codeline>
<codeline lineno="407"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>-1;<sp/>\</highlight></codeline>
<codeline lineno="408"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="409"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element-&gt;testFunction=_function;<sp/>\</highlight></codeline>
<codeline lineno="410"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_COPYSTRING(element-&gt;description,_description);<sp/>\</highlight></codeline>
<codeline lineno="411"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element-&gt;errorMessage=NULL;<sp/>\</highlight></codeline>
<codeline lineno="412"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element-&gt;result=PRIVATE_KCT_UNKNOWN;<sp/>\</highlight></codeline>
<codeline lineno="413"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element-&gt;skip=!toberun;<sp/>\</highlight></codeline>
<codeline lineno="414"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element-&gt;next=NULL</highlight></codeline>
<codeline lineno="415"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="438"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_ADDTESTCASE(_list,_test,_description,_toberun)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="439"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestListElement*<sp/>newadd;<sp/>\</highlight></codeline>
<codeline lineno="440"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_INITTESTLISTELEMENT(newadd,_test,_description,_toberun);<sp/>\</highlight></codeline>
<codeline lineno="441"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_list-&gt;head==NULL){<sp/>\</highlight></codeline>
<codeline lineno="442"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_list-&gt;head=newadd;<sp/>\</highlight></codeline>
<codeline lineno="443"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_list-&gt;tail=newadd;<sp/>\</highlight></codeline>
<codeline lineno="444"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="445"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_list-&gt;tail-&gt;next=newadd;<sp/>\</highlight></codeline>
<codeline lineno="446"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_list-&gt;tail=newadd;<sp/>\</highlight></codeline>
<codeline lineno="447"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="448"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_list-&gt;size++;<sp/>\</highlight></codeline>
<codeline lineno="449"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="450"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="461"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_FREETESTLIST(_list)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="462"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestListElement*<sp/>tofree=_list-&gt;head;<sp/>\</highlight></codeline>
<codeline lineno="463"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestListElement*<sp/>next;<sp/>\</highlight></codeline>
<codeline lineno="464"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(tofree!=NULL){<sp/>\</highlight></codeline>
<codeline lineno="465"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next=tofree-&gt;next;<sp/>\</highlight></codeline>
<codeline lineno="466"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free((char*)tofree-&gt;description);<sp/>\</highlight></codeline>
<codeline lineno="467"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free((char*)tofree-&gt;errorMessage);<sp/>\</highlight></codeline>
<codeline lineno="468"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(tofree);<sp/>\</highlight></codeline>
<codeline lineno="469"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tofree=next;<sp/>\</highlight></codeline>
<codeline lineno="470"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="471"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(_list);<sp/>\</highlight></codeline>
<codeline lineno="472"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="473"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="491"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_RUNALLTEST(_f,_list,_postDelete)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="492"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestListElement*<sp/>testToRun=_list-&gt;head;<sp/>\</highlight></codeline>
<codeline lineno="493"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>testnumber;<sp/>\</highlight></codeline>
<codeline lineno="494"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>oktest;<sp/>\</highlight></codeline>
<codeline lineno="495"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>skiptest;<sp/>\</highlight></codeline>
<codeline lineno="496"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>failtest;<sp/>\</highlight></codeline>
<codeline lineno="497"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(testToRun!=NULL){<sp/>\</highlight></codeline>
<codeline lineno="498"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(testToRun-&gt;skip==true){<sp/>\</highlight></codeline>
<codeline lineno="499"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testToRun-&gt;result=PRIVATE_KCT_SKIPPED;<sp/>\</highlight></codeline>
<codeline lineno="500"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testToRun=testToRun-&gt;next;<sp/>\</highlight></codeline>
<codeline lineno="501"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>continue;<sp/>\</highlight></codeline>
<codeline lineno="502"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="503"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTest=testToRun;<sp/>\</highlight></codeline>
<codeline lineno="504"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;%s<sp/>TEST<sp/>\&quot;%s\&quot;<sp/>%s\n&quot;,KCT_TESTSEPARATOR,testToRun-&gt;description,KCT_TESTSEPARATOR);<sp/>\</highlight></codeline>
<codeline lineno="505"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;\n&quot;);<sp/>\</highlight></codeline>
<codeline lineno="506"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testToRun-&gt;testFunction();<sp/>\</highlight></codeline>
<codeline lineno="507"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(testToRun-&gt;result<sp/>==<sp/>PRIVATE_KCT_UNKNOWN){<sp/>\</highlight></codeline>
<codeline lineno="508"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testToRun-&gt;result=PRIVATE_KCT_SUCCESS;<sp/>\</highlight></codeline>
<codeline lineno="509"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="510"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;!!!ERROR!!!<sp/>\&quot;%s\&quot;\n&quot;,testToRun-&gt;errorMessage);<sp/>\</highlight></codeline>
<codeline lineno="511"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="512"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;\n&quot;);<sp/>\</highlight></codeline>
<codeline lineno="513"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testToRun=testToRun-&gt;next;<sp/>\</highlight></codeline>
<codeline lineno="514"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="515"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;%s<sp/>FINAL<sp/>RESULTS<sp/>%s\n&quot;,KCT_TESTSEPARATOR,KCT_TESTSEPARATOR);<sp/>\</highlight></codeline>
<codeline lineno="516"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;\n&quot;);<sp/>\</highlight></codeline>
<codeline lineno="517"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testToRun=_list-&gt;head;<sp/>\</highlight></codeline>
<codeline lineno="518"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testnumber=1;<sp/>\</highlight></codeline>
<codeline lineno="519"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oktest=0;<sp/>\</highlight></codeline>
<codeline lineno="520"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failtest=0;<sp/>\</highlight></codeline>
<codeline lineno="521"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skiptest=0;<sp/>\</highlight></codeline>
<codeline lineno="522"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(testToRun!=NULL){<sp/>\</highlight></codeline>
<codeline lineno="523"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;%i)<sp/>%s\t&quot;,testnumber,testToRun-&gt;description);<sp/>\</highlight></codeline>
<codeline lineno="524"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(testToRun-&gt;result){<sp/>\</highlight></codeline>
<codeline lineno="525"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PRIVATE_KCT_SUCCESS:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="526"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;SUCCESS&quot;);<sp/>\</highlight></codeline>
<codeline lineno="527"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oktest++;<sp/>\</highlight></codeline>
<codeline lineno="528"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="529"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="530"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PRIVATE_KCT_FAIL:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="531"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;FAIL&quot;);<sp/>\</highlight></codeline>
<codeline lineno="532"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failtest++;<sp/>\</highlight></codeline>
<codeline lineno="533"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="534"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="535"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PRIVATE_KCT_SKIPPED:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="536"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skiptest++;<sp/>\</highlight></codeline>
<codeline lineno="537"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;SKIPPED&quot;);<sp/>\</highlight></codeline>
<codeline lineno="538"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="539"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="540"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PRIVATE_KCT_UNKNOWN:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="541"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;UNKNOWN&quot;);<sp/>\</highlight></codeline>
<codeline lineno="542"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="543"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="544"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="545"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;\n&quot;);<sp/>\</highlight></codeline>
<codeline lineno="546"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testToRun=testToRun-&gt;next;<sp/>\</highlight></codeline>
<codeline lineno="547"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testnumber++;<sp/>\</highlight></codeline>
<codeline lineno="548"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="549"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;\n&quot;);<sp/>\</highlight></codeline>
<codeline lineno="550"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;OK\t%d/%d<sp/>%%run<sp/>%2.3f\n&quot;,oktest,_list-&gt;size,(oktest*100.00)/(_list-&gt;size-skiptest));<sp/>\</highlight></codeline>
<codeline lineno="551"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;FAIL\t%d/%d<sp/>%%run<sp/>%2.3f\n&quot;,failtest,_list-&gt;size,(failtest*100.00)/(_list-&gt;size-skiptest));<sp/>\</highlight></codeline>
<codeline lineno="552"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;SKIPPED\t%d/%d\n&quot;,skiptest,_list-&gt;size);<sp/>\</highlight></codeline>
<codeline lineno="553"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_postDelete){<sp/>\</highlight></codeline>
<codeline lineno="554"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_FREETESTLIST(_list);<sp/>\</highlight></codeline>
<codeline lineno="555"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_list=NULL;<sp/>\</highlight></codeline>
<codeline lineno="556"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="557"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="558"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><ref refid="structTestList" kindref="compound" tooltip="Represents the entire list of test functions.">TestList</ref>*<sp/>testList=NULL;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="comment">/*FIXME<sp/>this<sp/>variable<sp/>prevents<sp/>you<sp/>to<sp/>create<sp/>multiple<sp/>lists:</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/>*<sp/>if<sp/>you<sp/>have<sp/>2<sp/>parallel<sp/>executing<sp/>lists,<sp/>with<sp/>this<sp/>variable<sp/>you<sp/>can&apos;t<sp/>obvously<sp/>keep</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/>*<sp/>trace<sp/>on<sp/>what<sp/>test<sp/>the<sp/>2<sp/>lists<sp/>are<sp/>executing!</highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="571"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structTestListElement" kindref="compound" tooltip="Defines a single element of the list.">TestListElement</ref>*<sp/>currentTest;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="preprocessor">#define<sp/>kct_addTestImproved(function,torun)<sp/>\</highlight></codeline>
<codeline lineno="588"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(testList==NULL){<sp/>\</highlight></codeline>
<codeline lineno="589"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_INITTESTLIST(testList);<sp/>\</highlight></codeline>
<codeline lineno="590"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="591"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_ADDTESTCASE(testList,function,#function,torun)</highlight></codeline>
<codeline lineno="592"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="comment">//TODO<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>kct_addTest(function)<sp/>\</highlight></codeline>
<codeline lineno="595"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_addTestImproved(function,true)</highlight></codeline>
<codeline lineno="596"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="611"><highlight class="preprocessor">#define<sp/>kct_runAllTest(outputfile)<sp/>\</highlight></codeline>
<codeline lineno="612"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_RUNALLTEST(outputfile,testList,true)</highlight></codeline>
<codeline lineno="613"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="617"><highlight class="preprocessor">#define<sp/>fail()<sp/>\</highlight></codeline>
<codeline lineno="618"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTest-&gt;result=PRIVATE_KCT_FAIL;<sp/>\</highlight></codeline>
<codeline lineno="619"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="620"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="627"><highlight class="preprocessor">#define<sp/>failMsg(message)<sp/>\</highlight></codeline>
<codeline lineno="628"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTest-&gt;errorMessage=copyString(message);\</highlight></codeline>
<codeline lineno="629"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTest-&gt;result=PRIVATE_KCT_FAIL;<sp/>\</highlight></codeline>
<codeline lineno="630"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="631"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="635"><highlight class="preprocessor">#define<sp/>ok()<sp/>\</highlight></codeline>
<codeline lineno="636"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTest-&gt;result=PRIVATE_KCT_SUCCESS;<sp/>\</highlight></codeline>
<codeline lineno="637"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="638"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="preprocessor">#define<sp/>assertCondition(condition)<sp/>\</highlight></codeline>
<codeline lineno="645"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((condition)==false){<sp/>\</highlight></codeline>
<codeline lineno="646"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail();<sp/>\</highlight></codeline>
<codeline lineno="647"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="658"><highlight class="preprocessor">#define<sp/>assertConditionMsg(condition,message)<sp/>\</highlight></codeline>
<codeline lineno="659"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((condition)==false){<sp/>\</highlight></codeline>
<codeline lineno="660"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failMsg(message);<sp/>\</highlight></codeline>
<codeline lineno="661"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment">//TODO<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>assertNotCondition(condition)<sp/>\</highlight></codeline>
<codeline lineno="665"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((condition)==true){<sp/>\</highlight></codeline>
<codeline lineno="666"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail();<sp/>\</highlight></codeline>
<codeline lineno="667"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="comment">//TODO<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>assertNotConditionMsg(condition,message)<sp/>\</highlight></codeline>
<codeline lineno="671"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((condtion)==true){<sp/>\</highlight></codeline>
<codeline lineno="672"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failMsg(message);<sp/>\</highlight></codeline>
<codeline lineno="673"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="comment">//TODO<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>assertEqual(expected,actual)<sp/>\</highlight></codeline>
<codeline lineno="677"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(expected!=actual)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="678"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;<sp/>\</highlight></codeline>
<codeline lineno="679"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="comment">//TODO<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>assertEqualMsg(message,expected,actual)<sp/>\</highlight></codeline>
<codeline lineno="683"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(expected!=actual){<sp/>\</highlight></codeline>
<codeline lineno="684"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failMsg(message);<sp/>\</highlight></codeline>
<codeline lineno="685"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment">//TODO<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>assertNotEqual(expected,actual)<sp/>\</highlight></codeline>
<codeline lineno="689"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(expected==actual)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="690"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail();<sp/>\</highlight></codeline>
<codeline lineno="691"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">//TODO<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>assertNotEqualMsg(message,expected,actual)<sp/>\</highlight></codeline>
<codeline lineno="695"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(expected==actual)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="696"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failMsg(message);<sp/>\</highlight></codeline>
<codeline lineno="697"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="comment">//TODO<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>assertNotNull(pointer)<sp/>\</highlight></codeline>
<codeline lineno="701"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(pointer==NULL){<sp/>\</highlight></codeline>
<codeline lineno="702"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail();<sp/>\</highlight></codeline>
<codeline lineno="703"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment">//TODO<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>assertNotNullMsg(message,pointer)<sp/>\</highlight></codeline>
<codeline lineno="707"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(pointer==NULL){<sp/>\</highlight></codeline>
<codeline lineno="708"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failMsg(message);<sp/>\</highlight></codeline>
<codeline lineno="709"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="comment">//TODO<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>assertExtremis(lowerbound,upperbound,lowin,upin,actual)<sp/>\</highlight></codeline>
<codeline lineno="713"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(actual&lt;lowerbound){<sp/>\</highlight></codeline>
<codeline lineno="714"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail();<sp/>\</highlight></codeline>
<codeline lineno="715"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="716"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(actual&gt;upperbound){<sp/>\</highlight></codeline>
<codeline lineno="717"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail();<sp/>\</highlight></codeline>
<codeline lineno="718"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="719"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((lowin==false)&amp;&amp;(actual==lowerbound)){<sp/>\</highlight></codeline>
<codeline lineno="720"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail();<sp/>\</highlight></codeline>
<codeline lineno="721"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="722"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((upin==false)&amp;&amp;(actual==upperbound))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="723"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail();<sp/>\</highlight></codeline>
<codeline lineno="724"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="comment">//TODO<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>assertExtremisMsg(message,lowerbound,upperbound,lowin,upin,actual)<sp/>\</highlight></codeline>
<codeline lineno="728"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(actual&lt;lowerbound){<sp/>\</highlight></codeline>
<codeline lineno="729"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failMsg(message);<sp/>\</highlight></codeline>
<codeline lineno="730"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="731"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(actual&gt;upperbound){<sp/>\</highlight></codeline>
<codeline lineno="732"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failMsg(message);<sp/>\</highlight></codeline>
<codeline lineno="733"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="734"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((lowin==false)&amp;&amp;(actual==lowerbound)){<sp/>\</highlight></codeline>
<codeline lineno="735"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failMsg(message);<sp/>\</highlight></codeline>
<codeline lineno="736"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="737"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((upin==false)&amp;&amp;(actual==upperbound))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="738"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failMsg(message);<sp/>\</highlight></codeline>
<codeline lineno="739"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>KOLDARCTESTER_H_<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/koldarCtester/KoldarCTester.h"/>
  </compounddef>
</doxygen>
