<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="KoldarCTester_8h" kind="file">
    <compoundname>KoldarCTester.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">limits.h</includes>
    <incdepgraph>
      <node id="8">
        <label>stdbool.h</label>
      </node>
      <node id="10">
        <label>stdlib.h</label>
      </node>
      <node id="7">
        <label>macro/KoldarCTester.h</label>
        <link refid="KoldarCTester.h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>limits.h</label>
      </node>
      <node id="11">
        <label>string.h</label>
      </node>
      <node id="9">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structTestListElement" prot="public">TestListElement</innerclass>
    <innerclass refid="structTestList" prot="public">TestList</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="KoldarCTester_8h_1a7d6e1cf1a8d53f38471e9e9db3faf740" prot="public" static="no">
        <name>__func__</name>
        <initializer>&quot;&lt;unknown&gt;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="280" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a8b4ceb7ab39cd5eee3485d8aa501ac69" prot="public" static="no">
        <name>PRIVATE_KCT_TESTSEPARATOR</name>
        <initializer>&quot;**************&quot;</initializer>
        <briefdescription>
<para>Represents the string that separates 2 test function in the output. </para>        </briefdescription>
        <detaileddescription>
<para>This macro controls the string separator between 2 test function. The default one is the string &quot;**************&quot; Compile your test program with KCT_CONTROLMACRO_TESTSEPARATOR enabled to change the separator between test functions: <programlisting><codeline><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>KCT_CONTROLMACRO_TESTSEPARATOR<sp/>&quot;%%%%%%%%%%%%%%%%&quot;</highlight></codeline>
</programlisting></para><para><image type="html" name="image02.png"></image>
</para><para><simplesect kind="warning"><para>To enable this custom behaviour, define KCT_CONTROLMACRO_TESTSEPARATOR <bold>before</bold> including KoldarCTester header. In alternative, you may compile your test suite with a &quot;-D&quot; flag enabled. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="310" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1abcf6ba8376fc35ac65ce41fd3d0bfec1" prot="public" static="no">
        <name>PRIVATE_KCT_ERRORMESSAGE_EXPECTED</name>
        <initializer>&quot;\nExpected value: &quot;</initializer>
        <briefdescription>
<para>Represents the string to print before the expected value in the error message. </para>        </briefdescription>
        <detaileddescription>
<para>This macro allows you to change the default string that is printed out after the developer message in the event a test fails. This string will printed only when macro functions like kct_assertEqualXXXMsg() are called; the macro isn&apos;t influenting failMsg() or AssertCondMsg() assertion like!</para><para>If you want to change the default value, define KCT_CONTROLMACRO_ERRORMESSAGE_EXPECTED as your custom string, like in this example:</para><para><programlisting><codeline><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>KCT_CONTROLMACRO_ERRORMESSAGE_EXPECTED<sp/>&quot;\nEXPECTED<sp/>VALUE&quot;</highlight></codeline>
</programlisting></para><para>The default value is: &quot;\nExpected value: &quot;.</para><para><simplesect kind="warning"><para>To enable this custom behaviour, define KCT_CONTROLMACRO_ERRORMESSAGE_EXPECTED <bold>before</bold> including KoldarCTester header. In alternative, you may compile your test suite with a &quot;-D&quot; flag enabled. The syntax of the error message is shown here:</para></simplesect>
!!!ERROR!!! errorMessage KCT_ERRORMESSAGE_EXPECTED value expected KCT_ERRORMESSAGE_ACTUAL actual value </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="345" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1ae96ea1c7ba8e936bb4272e0a24ac06b6" prot="public" static="no">
        <name>PRIVATE_KCT_ERRORMESSAGE_ACTUAL</name>
        <initializer>&quot;\nActual value: &quot;</initializer>
        <briefdescription>
<para>Represents the string to print before the actual value in the error message. </para>        </briefdescription>
        <detaileddescription>
<para>This macro allows you to change the default string that is printed out after the developer message in the event a test fails. This string will printed only when macro functions like kct_assertEqualXXXMsg() are called; the macro isn&apos;t influenting failMsg() or AssertCondMsg() assertion like!</para><para>If you want to change the default value, define KCT_CONTROLMACRO_ERRORMESSAGE_ACTUAL as your custom string, like in this example:</para><para><programlisting><codeline><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>KCT_CONTROLMACRO_ERRORMESSAGE_ACTUAL<sp/>&quot;\nACTUAL<sp/>VALUE&quot;</highlight></codeline>
</programlisting></para><para>The default value is: &quot;\nActual value: &quot;.</para><para><simplesect kind="warning"><para>To enable this custom behaviour, define KCT_CONTROLMACRO_ERRORMESSAGE_ACTUAL <bold>before</bold> including KoldarCTester header. In alternative, you may compile your test suite with a &quot;-D&quot; flag enabled. The syntax of the error message is shown here:</para></simplesect>
!!!ERROR!!! errorMessage KCT_ERRORMESSAGE_EXPECTED value expected KCT_ERRORMESSAGE_ACTUAL actual value </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="379" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a28c37c995e16de0ef2067f3269e2b8f1" prot="public" static="no">
        <name>PRIVATE_KCT_STRINGBUFFER</name>
        <initializer>15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This macro allows you to change the default size of the buffer used to convert values into strings. The buffer is useful only in assertions like kct_assertEqualXXXMsg().</para><para><simplesect kind="note"><para>{The default value is 15}</para></simplesect>
For example, let assume you want to convert the number 1234567890123456789. Being this number much longer than 15 the header will stringify will wrongly. By defining this custom value, you can easily increase the buffer size, solving the problem.</para><para><simplesect kind="warning"><para>To enable this custom behaviour, define KCT_CONTROLMACRO_STRINGBUFFER <bold>before</bold> including KoldarCTester header. In alternative, you may compile your test suite with a &quot;-D&quot; flag enabled. Represents the size of the buffer used to convert number (float or integer it doesn&apos;t matter) to strings. The constant is mainly used in the macros like PRIVATE_KCT_ITOA or PRIVATE_KCT_FTOA </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="404" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1ab00769d769cf83d9deff75b96a040993" prot="public" static="no">
        <name>PRIVATE_KCT_FAIL</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Represents the outcome of a test function when the test utterly fails. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="492" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="492" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1aa4b3f93f586198c0a63749d74f34afd4" prot="public" static="no">
        <name>PRIVATE_KCT_SUCCESS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Represents the outcome of a test function when the test terminates successfully. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="497" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="497" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1ad838fa7c43ef0a11f89440526a32c5f3" prot="public" static="no">
        <name>PRIVATE_KCT_SKIPPED</name>
        <initializer>2</initializer>
        <briefdescription>
<para>Represents the outcome of a test function when the test was to be skipped. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="502" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1aca3d9dd0d02aa557315a4ea065e668f4" prot="public" static="no">
        <name>PRIVATE_KCT_UNKNOWN</name>
        <initializer>3</initializer>
        <briefdescription>
<para>Represents the outcome of a test function that has not yet been executed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="507" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="507" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a6ce1deab2588c7f98556cba1cc0e798e" prot="public" static="no">
        <name>PRIVATE_KCT_COPYSTRING</name>
        <param><defname>destinationpointer</defname></param>
        <param><defname>constantString</defname></param>
        <initializer>destinationpointer=malloc(strlen(constantString)+1); \
	if (destinationpointer==NULL){ \
		fprintf(stderr,&quot;MaxTester.h:PRIVATE_KCT_COPYSTRING:not enough memory\n&quot;); \
		exit -1; \
	} \
	strcpy((char*)destinationpointer,constantString)</initializer>
        <briefdescription>
<para>copy a string in another one </para>        </briefdescription>
        <detaileddescription>
<para>It it highly suggested that constantString is a constant String or a simple variable. It is not recommended to use as &quot;constantString&quot; a call to a function because it might decrease performances.</para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>destinationpointer has not already been initialized with malloc; </para></listitem>
<listitem><para>destinationpointer has to be of type char*; </para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="post"><para><itemizedlist>
<listitem><para>the string in constantString is copied in the heap a the addres destinationpointer</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[char*]destinationpointer</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer where the copy of the stirng will be copied </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[char*]constantString</parametername>
</parameternamelist>
<parameterdescription>
<para>the original string </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="532" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a8f89a25a2d1603da8d1dd4ab7eb20582" prot="public" static="no">
        <name>PRIVATE_KCT_INITSTRING</name>
        <param><defname>string</defname></param>
        <param><defname>num</defname></param>
        <param><defname>conversion</defname></param>
        <initializer>string=malloc(<ref refid="KoldarCTester_8h_1a28c37c995e16de0ef2067f3269e2b8f1" kindref="member">PRIVATE_KCT_STRINGBUFFER</ref>); \
	sprintf(string,conversion,num);</initializer>
        <briefdescription>
<para>convert an integer to string </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>It is highly recommended that you use as &quot;string&quot; parameter only a simple variable. Complex formula might cause instabilities</para></simplesect>
Some example of this function use might be: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//converts<sp/>4<sp/>in<sp/>a<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="KoldarCTester_8h_1a8f89a25a2d1603da8d1dd4ab7eb20582" kindref="member" tooltip="convert an integer to string">PRIVATE_KCT_INITSTRING</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,4,</highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//converts<sp/>4.45<sp/>in<sp/>a<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="KoldarCTester_8h_1a8f89a25a2d1603da8d1dd4ab7eb20582" kindref="member" tooltip="convert an integer to string">PRIVATE_KCT_INITSTRING</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,4.45,</highlight><highlight class="stringliteral">&quot;%2.3f&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//converts<sp/>4<sp/>in<sp/>a<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="KoldarCTester_8h_1a8f89a25a2d1603da8d1dd4ab7eb20582" kindref="member" tooltip="convert an integer to string">PRIVATE_KCT_INITSTRING</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,4,</highlight><highlight class="stringliteral">&quot;%lu&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>string must not be initialized </para></listitem>
<listitem><para>string must be of type char* </para></listitem>
<listitem><para>num must be of type number; it might be: -* int -* short -* long -* float -* double -* various unsigned </para></listitem>
<listitem><para>conversion must be a constant string; </para></listitem>
<listitem><para>conversion must be a conversion printf format string; </para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="post"><para><itemizedlist>
<listitem><para>string contains a string representation of num; </para></listitem>
<listitem><para>string lead to an allocated space of memory that <bold>must</bold> be free manually with <ref refid="KoldarCTester_8h_1aad99e877d917b72ee19c29b3acdc03de" kindref="member">PRIVATE_KCT_FREESTRING()</ref>;</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer that will lead to the string representation of num </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>the integer number to convert </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="573" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="571" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1aad99e877d917b72ee19c29b3acdc03de" prot="public" static="no">
        <name>PRIVATE_KCT_FREESTRING</name>
        <param><defname>string</defname></param>
        <initializer>free(string);</initializer>
        <briefdescription>
<para>free an already allocated string </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>It is highly recommended that you use as &quot;string&quot; parameter only a simple variable. Complex formula might cause instabilities</para></simplesect>
<simplesect kind="pre"><para><itemizedlist>
<listitem><para>string was allocated with PRIVATE_KCT_INITSTRING; </para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="post"><para><itemizedlist>
<listitem><para>string is freed from the memory;</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to be deallocated; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="592" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="591" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a78e835cf42e2e31a9f35c3b81e42a785" prot="public" static="no">
        <name>PRIVATE_KCT_COMPOSESTRING</name>
        <param><defname>destination</defname></param>
        <param><defname>string1</defname></param>
        <param><defname>string2</defname></param>
        <param><defname>string3</defname></param>
        <param><defname>string4</defname></param>
        <param><defname>string5</defname></param>
        <initializer>{ \
	destination=malloc(1+strlen(string1)+strlen(string2)+strlen(string3)+strlen(string4)+strlen(string5)); \
	strcpy(destination,string1); \
	strcat(destination,string2); \
	strcat(destination,string3); \
	strcat(destination,string4); \
	strcat(destination,string5); \
}</initializer>
        <briefdescription>
<para>compose a new string by concatenating all the strings in the the give array </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>destination must be a char* </para></listitem>
<listitem><para>destination must not be already mallocated </para></listitem>
<listitem><para>string1-5 must be char* (or constant strings) </para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="post"><para><itemizedlist>
<listitem><para>destination is a char* pointing to a string computed by concatenating all the strings together.</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer linking the strings concatenated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strings</parametername>
</parameternamelist>
<parameterdescription>
<para>the set of string to be concatenated </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="615" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a8e11e08dae8a81dd88ea867a2650f164" prot="public" static="no">
        <name>PRIVATE_KCT_INITTESTLIST</name>
        <param><defname>list</defname></param>
        <initializer>list=malloc(sizeof(<ref refid="structTestList" kindref="compound">TestList</ref>)); \
	if (list==NULL){ \
		fprintf(stderr,&quot;MaxTester.c:initTestList:1:Not enough memory\n&quot;); \
		exit -1; \
	} \
	list-&gt;head=NULL; \
	list-&gt;tail=NULL; \
	list-&gt;size=0</initializer>
        <briefdescription>
<para>constructs an empty test list </para>        </briefdescription>
        <detaileddescription>
<para>It is highly recommended that you put in list a single variable, not a function returning a TestList*</para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>list *has* to be of type TestList* </para></listitem>
<listitem><para>list has not been initialized with malloc </para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="post"><para><itemizedlist>
<listitem><para>an empty testlist is allocated in the memory </para></listitem>
<listitem><para>the head of the list is NULL; </para></listitem>
<listitem><para>the tail of the list is NULL; </para></listitem>
<listitem><para>the size of the list is 0;</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[TestList*]</parametername>
</parameternamelist>
<parameterdescription>
<para>construct a new <ref refid="structTestList" kindref="compound">TestList</ref> and store its pointer in this very parameter </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="644" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="636" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a80ef5404b6dbbc96e005228ead0fc158" prot="public" static="no">
        <name>PRIVATE_KCT_INITTESTLISTELEMENT</name>
        <param><defname>element</defname></param>
        <param><defname>_function</defname></param>
        <param><defname>_description</defname></param>
        <param><defname>toberun</defname></param>
        <initializer>element=malloc(sizeof(<ref refid="structTestListElement" kindref="compound">TestListElement</ref>)); \
	if (element==NULL){ \
		fprintf(stderr,&quot;KoldarCTester.h:PRIVATE_KCT_INITTESTLISTELEMENT:not enough memory&quot;); \
		exit -1; \
	} \
	element-&gt;testFunction=_function; \
	<ref refid="KoldarCTester_8h_1a6ce1deab2588c7f98556cba1cc0e798e" kindref="member">PRIVATE_KCT_COPYSTRING</ref>(element-&gt;description,_description); \
	element-&gt;errorMessage=NULL; \
	element-&gt;result=<ref refid="KoldarCTester_8h_1aca3d9dd0d02aa557315a4ea065e668f4" kindref="member">PRIVATE_KCT_UNKNOWN</ref>; \
	element-&gt;skip=!toberun; \
	element-&gt;next=NULL</initializer>
        <briefdescription>
<para>Create a new <ref refid="structTestListElement" kindref="compound">TestListElement</ref> in the memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>element has to be of type TestListElement*; </para></listitem>
<listitem><para>element has not already been initialized with malloc; </para></listitem>
<listitem><para>element must be a simple variable (i.e. a,list); </para></listitem>
<listitem><para>testdescription has to be a constant string, like &quot;hello&quot;; </para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="post"><para><itemizedlist>
<listitem><para>a new <ref refid="structTestListElement" kindref="compound">TestListElement</ref> is allocated in the heap; </para></listitem>
<listitem><para>the field &quot;result&quot; of the newly created <ref refid="structTestListElement" kindref="compound">TestListElement</ref> is KCT_UNKNWON; </para></listitem>
<listitem><para>the field &quot;errorMessage&quot; of the newly created <ref refid="structTestListElement" kindref="compound">TestListElement</ref> is NULL;</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[TestListElement*]element</parametername>
</parameternamelist>
<parameterdescription>
<para>a uninitialized pointer of <ref refid="structTestListElement" kindref="compound">TestListElement</ref> that will be used to point the new structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[TestFunction]_function</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer name of the function that will be used as a test function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[char*]_description</parametername>
</parameternamelist>
<parameterdescription>
<para>a string representing the description of the test; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[bool]toberun</parametername>
</parameternamelist>
<parameterdescription>
<para>TRUE if you want to actually use this test during the test run, FALSE if you want to be added to the list but you want to skip it </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="677" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="666" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1ade3d8352d0d6048762450c2a7627f0c0" prot="public" static="no">
        <name>PRIVATE_KCT_ADDTESTCASE</name>
        <param><defname>_list</defname></param>
        <param><defname>_test</defname></param>
        <param><defname>_description</defname></param>
        <param><defname>_toberun</defname></param>
        <initializer>{ \
	<ref refid="structTestListElement" kindref="compound">TestListElement</ref>* newadd; \
	<ref refid="KoldarCTester_8h_1a80ef5404b6dbbc96e005228ead0fc158" kindref="member">PRIVATE_KCT_INITTESTLISTELEMENT</ref>(newadd,_test,_description,_toberun); \
	if (_list-&gt;head==NULL){ \
		_list-&gt;head=newadd; \
		_list-&gt;tail=newadd; \
	}else { \
		_list-&gt;tail-&gt;next=newadd; \
		_list-&gt;tail=newadd; \
	} \
	_list-&gt;size++; \
}</initializer>
        <briefdescription>
<para>adds a new test function in the test list </para>        </briefdescription>
        <detaileddescription>
<para>The variable list is best not to be a complex formula, but a simple variable: in this way the macro function is way quicker</para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>_test is already been declared </para></listitem>
<listitem><para>_list of type TestList* </para></listitem>
<listitem><para>_test is of type TestFunction </para></listitem>
<listitem><para>_description is a char* </para></listitem>
<listitem><para>_toberun is a bool </para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="post"><para><itemizedlist>
<listitem><para>_test function is stored in the test list </para></listitem>
<listitem><para>_errormessage field is set to NULL</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[TestList*]_list</parametername>
</parameternamelist>
<parameterdescription>
<para>the test list where to add the test function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[TestFunction]_test</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to be added in the test list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[char*]_description</parametername>
</parameternamelist>
<parameterdescription>
<para>a brief description of what the test verifies. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[bool]_toberun</parametername>
</parameternamelist>
<parameterdescription>
<para><itemizedlist>
<listitem><para>TRUE if you want to insert the testcase in the list and execute it; </para></listitem>
<listitem><para>FALSE if you want to insert the testcase in the list but you want it to skip it; </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="713" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="702" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a34a2fcc3214b6281c924261e1745e80c" prot="public" static="no">
        <name>PRIVATE_KCT_FREETESTLIST</name>
        <param><defname>_list</defname></param>
        <initializer>{ \
	<ref refid="structTestListElement" kindref="compound">TestListElement</ref>* tofree=_list-&gt;head; \
	<ref refid="structTestListElement" kindref="compound">TestListElement</ref>* next; \
	while (tofree!=NULL){ \
		next=tofree-&gt;next; \
		free((char*)tofree-&gt;description); \
		free((char*)tofree-&gt;errorMessage); \
		free(tofree); \
		tofree=next; \
	} \
	free(_list); \
}</initializer>
        <briefdescription>
<para>free the memory occupied by the list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>_list not NULL; </para></listitem>
<listitem><para>_list is of type TestList*; </para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="post"><para><itemizedlist>
<listitem><para>the memory allocated to every <ref refid="structTestListElement" kindref="compound">TestListElement</ref> pointed by the list is freed.</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[TestList*]list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list to be freed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="737" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="726" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1aab3cd05e31c5338e1ff39b821819280d" prot="public" static="no">
        <name>PRIVATE_KCT_RUNALLTEST</name>
        <param><defname>_f</defname></param>
        <param><defname>_list</defname></param>
        <param><defname>_postDelete</defname></param>
        <initializer>{ \
	<ref refid="structTestListElement" kindref="compound">TestListElement</ref>* testToRun=_list-&gt;head; \
	int testnumber; \
	int oktest; \
	int skiptest; \
	int failtest; \
	while (testToRun!=NULL){ \
		if (testToRun-&gt;skip==true){ \
			testToRun-&gt;result=<ref refid="KoldarCTester_8h_1ad838fa7c43ef0a11f89440526a32c5f3" kindref="member">PRIVATE_KCT_SKIPPED</ref>; \
			testToRun=testToRun-&gt;next; \
			continue; \
		} \
		<ref refid="KoldarCTester_8h_1a60c5089114599af5f1714400c691fb05" kindref="member">currentTest</ref>=testToRun; \
		fprintf(_f,&quot;%s TEST \&quot;%s\&quot; %s\n&quot;,PRIVATE_KCT_TESTSEPARATOR,testToRun-&gt;description,<ref refid="KoldarCTester_8h_1a8b4ceb7ab39cd5eee3485d8aa501ac69" kindref="member">PRIVATE_KCT_TESTSEPARATOR</ref>); \
		fprintf(_f,&quot;\n&quot;); \
		testToRun-&gt;testFunction(); \
		if (testToRun-&gt;result == <ref refid="KoldarCTester_8h_1aca3d9dd0d02aa557315a4ea065e668f4" kindref="member">PRIVATE_KCT_UNKNOWN</ref>){ \
			testToRun-&gt;result=<ref refid="KoldarCTester_8h_1aa4b3f93f586198c0a63749d74f34afd4" kindref="member">PRIVATE_KCT_SUCCESS</ref>; \
		}else { \
			fprintf(_f,&quot;!!!ERROR!!! %s\n&quot;,testToRun-&gt;errorMessage); \
		} \
		fprintf(_f,&quot;\n&quot;); \
		testToRun=testToRun-&gt;next; \
	} \
	fprintf(_f,&quot;%s FINAL RESULTS %s\n&quot;,PRIVATE_KCT_TESTSEPARATOR,<ref refid="KoldarCTester_8h_1a8b4ceb7ab39cd5eee3485d8aa501ac69" kindref="member">PRIVATE_KCT_TESTSEPARATOR</ref>); \
	fprintf(_f,&quot;\n&quot;); \
	testToRun=_list-&gt;head; \
	testnumber=1; \
	oktest=0; \
	failtest=0; \
	skiptest=0; \
	while (testToRun!=NULL){ \
		fprintf(_f,&quot;%i) %s\t&quot;,testnumber,testToRun-&gt;description); \
		switch (testToRun-&gt;result){ \
		case PRIVATE_KCT_SUCCESS: { \
			fprintf(_f,&quot;SUCCESS&quot;); \
			oktest++; \
			break; \
		} \
		case PRIVATE_KCT_FAIL: { \
			fprintf(_f,&quot;FAIL&quot;); \
			failtest++; \
			break; \
		} \
		case PRIVATE_KCT_SKIPPED: { \
			skiptest++; \
			fprintf(_f,&quot;SKIPPED&quot;); \
			break; \
		} \
		case PRIVATE_KCT_UNKNOWN: { \
			fprintf(_f,&quot;UNKNOWN&quot;); \
			break; \
		} \
		} \
		fprintf(_f,&quot;\n&quot;); \
		testToRun=testToRun-&gt;next; \
		testnumber++; \
	} \
	fprintf(_f,&quot;\n&quot;); \
	fprintf(_f,&quot;OK\t%d/%d %%run %2.3f\n&quot;,oktest,_list-&gt;size,(oktest*100.00)/(_list-&gt;size-skiptest)); \
	fprintf(_f,&quot;FAIL\t%d/%d %%run %2.3f\n&quot;,failtest,_list-&gt;size,(failtest*100.00)/(_list-&gt;size-skiptest)); \
	fprintf(_f,&quot;SKIPPED\t%d/%d\n&quot;,skiptest,_list-&gt;size); \
	if (_postDelete){ \
		PRIVATE_KCT_FREETESTLIST(_list); \
		_list=NULL; \
	} \
}</initializer>
        <briefdescription>
<para>run all the test in the list </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>_f open in write mode; </para></listitem>
<listitem><para>_list not NULL; </para></listitem>
<listitem><para>_f is of type FILE*; </para></listitem>
<listitem><para>_list is of type TestList*; </para></listitem>
<listitem><para>_postDelete is of type bool; </para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="post"><para><itemizedlist>
<listitem><para>all the tests which have &quot;skip&quot; flag set to FALSE are run</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[FILE*]_f</parametername>
</parameternamelist>
<parameterdescription>
<para>the file to write the output on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[TestList*]_list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list holding the various test functions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[bool]_postDelete</parametername>
</parameternamelist>
<parameterdescription>
<para><itemizedlist>
<listitem><para>TRUE if you want to automatically call clearTestCase() function at the end of the test functions; </para></listitem>
<listitem><para>FALSE otherwise; </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="823" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="757" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a8b21af1302fae84b59f07b2b8964a64e" prot="public" static="no">
        <name>kct_addTestImproved</name>
        <param><defname>function</defname></param>
        <param><defname>torun</defname></param>
        <initializer>if (<ref refid="KoldarCTester_8h_1a44b6f03c5a8ee29e943e9ae44c4e5faa" kindref="member">testList</ref>==NULL){ \
		<ref refid="KoldarCTester_8h_1a8e11e08dae8a81dd88ea867a2650f164" kindref="member">PRIVATE_KCT_INITTESTLIST</ref>(<ref refid="KoldarCTester_8h_1a44b6f03c5a8ee29e943e9ae44c4e5faa" kindref="member">testList</ref>); \
	} \
	<ref refid="KoldarCTester_8h_1ade3d8352d0d6048762450c2a7627f0c0" kindref="member">PRIVATE_KCT_ADDTESTCASE</ref>(<ref refid="KoldarCTester_8h_1a44b6f03c5a8ee29e943e9ae44c4e5faa" kindref="member">testList</ref>,function,#function,torun)</initializer>
        <briefdescription>
<para>adds a new function in the test list </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>function has already been defined; </para></listitem>
<listitem><para>function must have no formal parameters; </para></listitem>
<listitem><para>function must return a void type; </para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="post"><para><itemizedlist>
<listitem><para>the function is inside the test list</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[TestFunction]function</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to include in the test list; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[bool]torun</parametername>
</parameternamelist>
<parameterdescription>
<para>TRUE is you want to actually run the test, FALSE if you want to include it in the list but you want to skip it </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="867" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="863" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a5e05020cd2cbf6ef54e4abb4c5d3ca57" prot="public" static="no">
        <name>kct_addTest</name>
        <param><defname>function</defname></param>
        <initializer><ref refid="KoldarCTester_8h_1a8b21af1302fae84b59f07b2b8964a64e" kindref="member">kct_addTestImproved</ref>(function,true)</initializer>
        <briefdescription>
<para>adds a new function in the test list </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>function has already been defined; </para></listitem>
<listitem><para>function must have no formal parameters; </para></listitem>
<listitem><para>function must return a void type; </para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="post"><para><itemizedlist>
<listitem><para>the function is inside the test list</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[TestFunction]function</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to include in the test list; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="882" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="881" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1ac8a6b69e2336189f749c385c0f753bc6" prot="public" static="no">
        <name>kct_runAllTest</name>
        <param><defname>outputfile</defname></param>
        <initializer><ref refid="KoldarCTester_8h_1aab3cd05e31c5338e1ff39b821819280d" kindref="member">PRIVATE_KCT_RUNALLTEST</ref>(outputfile,<ref refid="KoldarCTester_8h_1a44b6f03c5a8ee29e943e9ae44c4e5faa" kindref="member">testList</ref>,true)</initializer>
        <briefdescription>
<para>run all the test added to the test list. </para>        </briefdescription>
        <detaileddescription>
<para>The function run all the tests which has been added to the test list. You can add test function in the test list with the function <ref refid="KoldarCTester_8h_1a5e05020cd2cbf6ef54e4abb4c5d3ca57" kindref="member">kct_addTest()</ref>. Not all the tests will be run, but onyly those tests which are appended with the flag &quot;torun&quot; set to &quot;TRUE&quot;</para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>outputfile open in write mode </para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="post"><para><itemizedlist>
<listitem><para>test outcome is appended to the outputfile</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[FILE*]outputfile</parametername>
</parameternamelist>
<parameterdescription>
<para>where to write the test outcome </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="900" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="899" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a4088943ed7c8cae2b853b402f29b4004" prot="public" static="no">
        <name>kct_fail</name>
        <param></param>
        <initializer><ref refid="KoldarCTester_8h_1a60c5089114599af5f1714400c691fb05" kindref="member">currentTest</ref>-&gt;result=<ref refid="KoldarCTester_8h_1ab00769d769cf83d9deff75b96a040993" kindref="member">PRIVATE_KCT_FAIL</ref>; \
	return;</initializer>
        <briefdescription>
<para>Terminate the test and set the result of it as a failure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="913" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="911" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a711828fbdf116ebd2722f9aa48916832" prot="public" static="no">
        <name>kct_failMsg</name>
        <param><defname>message</defname></param>
        <initializer><ref refid="KoldarCTester_8h_1a6ce1deab2588c7f98556cba1cc0e798e" kindref="member">PRIVATE_KCT_COPYSTRING</ref>(<ref refid="KoldarCTester_8h_1a60c5089114599af5f1714400c691fb05" kindref="member">currentTest</ref>-&gt;errorMessage,message); \
	<ref refid="KoldarCTester_8h_1a60c5089114599af5f1714400c691fb05" kindref="member">currentTest</ref>-&gt;result=<ref refid="KoldarCTester_8h_1ab00769d769cf83d9deff75b96a040993" kindref="member">PRIVATE_KCT_FAIL</ref>; \
	return;</initializer>
        <briefdescription>
<para>Terminate the test and set the result of it as a failure. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[char*]message</parametername>
</parameternamelist>
<parameterdescription>
<para>represents the message to display just before the ending of the test. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="925" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="922" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a8497b72e092de90ddde2ebf2aad987ca" prot="public" static="no">
        <name>kct_ok</name>
        <param></param>
        <initializer>return;</initializer>
        <briefdescription>
<para>terminates successfully the current test </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="932" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="931" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1ab47b71b14664ccf62a03056bf6afd299" prot="public" static="no">
        <name>kct_assertCondition</name>
        <param><defname>condition</defname></param>
        <initializer>if ((condition)==false){ \
		<ref refid="KoldarCTester_8h_1a4088943ed7c8cae2b853b402f29b4004" kindref="member">kct_fail</ref>(); \
	}</initializer>
        <briefdescription>
<para>end the test as a failure if the condition is <bold>not</bold> met </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>represents the condition to be tested </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="942" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="939" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1ab8d7d3073507383a0ab0913ebdce4a10" prot="public" static="no">
        <name>kct_assertConditionMsg</name>
        <param><defname>message</defname></param>
        <param><defname>condition</defname></param>
        <initializer>if ((condition)==false){ \
		<ref refid="KoldarCTester_8h_1a711828fbdf116ebd2722f9aa48916832" kindref="member">kct_failMsg</ref>(message); \
	}</initializer>
        <briefdescription>
<para>end the test as a failure if the condition IS <bold>not</bold> met </para>        </briefdescription>
        <detaileddescription>
<para>In addition to end the test if condition is <bold>not</bold> met, this function will display an error message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[char*]message</parametername>
</parameternamelist>
<parameterdescription>
<para>represents the error message to be display if the condition is not met </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>represents the condition to be test </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="957" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="954" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a97bd5c75a68868a4e449fa6d2abd7bd8" prot="public" static="no">
        <name>kct_assertNotCondition</name>
        <param><defname>condition</defname></param>
        <initializer>if ((condition)==true){ \
		<ref refid="KoldarCTester_8h_1a4088943ed7c8cae2b853b402f29b4004" kindref="member">kct_fail</ref>(); \
	}</initializer>
        <briefdescription>
<para>end the test as a failure if the condition is met </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>represents the condition to be tested </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="967" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="964" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1ac1eb638d5f665bf8b99147c08db85788" prot="public" static="no">
        <name>kct_assertNotConditionMsg</name>
        <param><defname>message</defname></param>
        <param><defname>condition</defname></param>
        <initializer>if ((condtion)==true){ \
		<ref refid="KoldarCTester_8h_1a711828fbdf116ebd2722f9aa48916832" kindref="member">kct_failMsg</ref>(message); \
	}</initializer>
        <briefdescription>
<para>end the test as a failure if the condition is met </para>        </briefdescription>
        <detaileddescription>
<para>In addition to end the test if condition is met, this function will display an error message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[char*]message</parametername>
</parameternamelist>
<parameterdescription>
<para>represents the error message to be display if the condition is not met </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>represents the condition to be test </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="982" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="979" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a7c6235260c2f0889936b8edda762db19" prot="public" static="no">
        <name>kct_assertEqualPrimitiveMsg</name>
        <param><defname>message</defname></param>
        <param><defname>type</defname></param>
        <param><defname>conversion</defname></param>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer>{ \
	type private_kct_variable_kct_assertEqualPrimitiveMsg_intexpected=(expected); \
	type private_kct_variable_kct_assertEqualPrimitiveMsg_intactual=(actual); \
	if ((private_kct_variable_kct_assertEqualPrimitiveMsg_intactual)!=(private_kct_variable_kct_assertEqualPrimitiveMsg_intexpected)){ \
		char* private_kct_variable_kct_assertEqualPrimitiveMsg_str_exp; \
		char* private_kct_variable_kct_assertEqualPrimitiveMsg_str_act; \
		<ref refid="KoldarCTester_8h_1a8f89a25a2d1603da8d1dd4ab7eb20582" kindref="member">PRIVATE_KCT_INITSTRING</ref>(private_kct_variable_kct_assertEqualPrimitiveMsg_str_exp,private_kct_variable_kct_assertEqualPrimitiveMsg_intexpected,conversion); \
		<ref refid="KoldarCTester_8h_1a8f89a25a2d1603da8d1dd4ab7eb20582" kindref="member">PRIVATE_KCT_INITSTRING</ref>(private_kct_variable_kct_assertEqualPrimitiveMsg_str_act,private_kct_variable_kct_assertEqualPrimitiveMsg_intactual,conversion); \
		<ref refid="KoldarCTester_8h_1a78e835cf42e2e31a9f35c3b81e42a785" kindref="member">PRIVATE_KCT_COMPOSESTRING</ref>(<ref refid="KoldarCTester_8h_1a60c5089114599af5f1714400c691fb05" kindref="member">currentTest</ref>-&gt;errorMessage, \
			message, \
			<ref refid="KoldarCTester_8h_1abcf6ba8376fc35ac65ce41fd3d0bfec1" kindref="member">PRIVATE_KCT_ERRORMESSAGE_EXPECTED</ref>, \
			private_kct_variable_kct_assertEqualPrimitiveMsg_str_exp, \
			<ref refid="KoldarCTester_8h_1ae96ea1c7ba8e936bb4272e0a24ac06b6" kindref="member">PRIVATE_KCT_ERRORMESSAGE_ACTUAL</ref>, \
			private_kct_variable_kct_assertEqualPrimitiveMsg_str_act); \
		<ref refid="KoldarCTester_8h_1aad99e877d917b72ee19c29b3acdc03de" kindref="member">PRIVATE_KCT_FREESTRING</ref>(private_kct_variable_kct_assertEqualPrimitiveMsg_str_exp); \
		<ref refid="KoldarCTester_8h_1aad99e877d917b72ee19c29b3acdc03de" kindref="member">PRIVATE_KCT_FREESTRING</ref>(private_kct_variable_kct_assertEqualPrimitiveMsg_str_act); \
		<ref refid="KoldarCTester_8h_1a4088943ed7c8cae2b853b402f29b4004" kindref="member">kct_fail</ref>(); \
	} \
}</initializer>
        <briefdescription>
<para>Checks if 2 simple values are equal. If not, send an error. </para>        </briefdescription>
        <detaileddescription>
<para>The function checks if 2 data are equal. If they are, nothing will happen. If not, the 2 values are converted in string and a error message is thrown at the user. The error is so composed:<orderedlist>
<listitem><para>message parameter;</para></listitem><listitem><para>KCT_ERRORMESSAGE_EXPECTED;</para></listitem><listitem><para>expected parameter converted into string;</para></listitem><listitem><para>KCT_ERRORMESSAGE_ACTUAL;</para></listitem><listitem><para>actual parameter converted into string;</para></listitem></orderedlist>
</para><para>The function can manage only simple data: they include: <itemizedlist>
<listitem><para>int; </para></listitem>
<listitem><para>short; </para></listitem>
<listitem><para>long; </para></listitem>
<listitem><para>float; </para></listitem>
<listitem><para>double; </para></listitem>
<listitem><para>unsigned variations; </para></listitem>
<listitem><para>pointer variations (check the very pointers, not the structure pointed by them); </para></listitem>
<listitem><para>enumerations;</para></listitem>
</itemizedlist>
<simplesect kind="warning"><para>While string and structure can be inserted as values to be checked, the function can&apos;t compare them with ease. If you have to compare strings or structures, please use PRIVATE_KCT_ASSERTSTRINGEQUAL or PRIVATE_KCT_ASSERTSTRUCTEQUAL</para></simplesect>
<simplesect kind="pre"><para><itemizedlist>
<listitem><para>message is of type char* (or a string); </para></listitem>
<listitem><para>type is a simple type; </para></listitem>
<listitem><para>conversion is a formatter string, like &quot;%d&quot;; </para></listitem>
<listitem><para>expected is a value of type type; </para></listitem>
<listitem><para>actual is a value of type type;</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[char*]message</parametername>
</parameternamelist>
<parameterdescription>
<para>represents a custom message to prepend to the error message; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>represents the type of expected and actual values; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conversion</parametername>
</parameternamelist>
<parameterdescription>
<para>represents the formatter string used to format the stirng representations of expected and actual; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected</parametername>
</parameternamelist>
<parameterdescription>
<para>the value that the developer expects to get; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>actual</parametername>
</parameternamelist>
<parameterdescription>
<para>the very value received </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="1041" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="1023" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a8b6f1bb142ced3a6d64d6cb08889bf77" prot="public" static="no">
        <name>kct_assertNotEqualPrimitiveMsg</name>
        <param><defname>message</defname></param>
        <param><defname>type</defname></param>
        <param><defname>conversion</defname></param>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer>{ \
	type private_kct_variable_kct_assertNotEqualPrimitiveMsg_intexpected=(expected); \
	type private_kct_variable_kct_assertNotEqualPrimitiveMsg_intactual=(actual); \
	if ((private_kct_variable_kct_assertNotEqualPrimitiveMsg_intactual)==(private_kct_variable_kct_assertNotEqualPrimitiveMsg_intexpected)){ \
		char* private_kct_variable_kct_assertNotEqualPrimitiveMsg_str_exp; \
		char* private_kct_variable_kct_assertNotEqualPrimitiveMsg_str_act; \
		<ref refid="KoldarCTester_8h_1a8f89a25a2d1603da8d1dd4ab7eb20582" kindref="member">PRIVATE_KCT_INITSTRING</ref>(private_kct_variable_kct_assertNotEqualPrimitiveMsg_str_exp,private_kct_variable_kct_assertNotEqualPrimitiveMsg_intexpected,conversion); \
		<ref refid="KoldarCTester_8h_1a8f89a25a2d1603da8d1dd4ab7eb20582" kindref="member">PRIVATE_KCT_INITSTRING</ref>(private_kct_variable_kct_assertNotEqualPrimitiveMsg_str_act,private_kct_variable_kct_assertNotEqualPrimitiveMsg_intactual,conversion); \
		<ref refid="KoldarCTester_8h_1a78e835cf42e2e31a9f35c3b81e42a785" kindref="member">PRIVATE_KCT_COMPOSESTRING</ref>(<ref refid="KoldarCTester_8h_1a60c5089114599af5f1714400c691fb05" kindref="member">currentTest</ref>-&gt;errorMessage, \
			message, \
			<ref refid="KoldarCTester_8h_1abcf6ba8376fc35ac65ce41fd3d0bfec1" kindref="member">PRIVATE_KCT_ERRORMESSAGE_EXPECTED</ref>, \
			private_kct_variable_kct_assertNotEqualPrimitiveMsg_str_exp, \
			<ref refid="KoldarCTester_8h_1ae96ea1c7ba8e936bb4272e0a24ac06b6" kindref="member">PRIVATE_KCT_ERRORMESSAGE_ACTUAL</ref>, \
			private_kct_variable_kct_assertNotEqualPrimitiveMsg_str_act); \
		<ref refid="KoldarCTester_8h_1aad99e877d917b72ee19c29b3acdc03de" kindref="member">PRIVATE_KCT_FREESTRING</ref>(private_kct_variable_kct_assertNotEqualPrimitiveMsg_str_exp); \
		<ref refid="KoldarCTester_8h_1aad99e877d917b72ee19c29b3acdc03de" kindref="member">PRIVATE_KCT_FREESTRING</ref>(private_kct_variable_kct_assertNotEqualPrimitiveMsg_str_act); \
		<ref refid="KoldarCTester_8h_1a4088943ed7c8cae2b853b402f29b4004" kindref="member">kct_fail</ref>(); \
	} \
}</initializer>
        <briefdescription>
<para>Checks if 2 simple values are not equal. If not, send an error. </para>        </briefdescription>
        <detaileddescription>
<para>The function checks if 2 data are different. If they are, nothing will happen. If not, the 2 values are converted in string and a error message is thrown at the user. The error is so composed:<orderedlist>
<listitem><para>message parameter;</para></listitem><listitem><para>KCT_ERRORMESSAGE_EXPECTED;</para></listitem><listitem><para>expected parameter converted into string;</para></listitem><listitem><para>KCT_ERRORMESSAGE_ACTUAL;</para></listitem><listitem><para>actual parameter converted into string;</para></listitem></orderedlist>
</para><para>The function can manage only simple data: they include: <itemizedlist>
<listitem><para>int; </para></listitem>
<listitem><para>short; </para></listitem>
<listitem><para>long; </para></listitem>
<listitem><para>float; </para></listitem>
<listitem><para>double; </para></listitem>
<listitem><para>unsigned variations; </para></listitem>
<listitem><para>pointer variations (check the very pointers, not the structure pointed by them); </para></listitem>
<listitem><para>enumerations;</para></listitem>
</itemizedlist>
<simplesect kind="warning"><para>While stirng and structure can be inserted as values to be checked, the function can&apos;t compare them with ease. If you have to compare strings or structures, please use PRIVATE_KCT_ASSERTSTRINGEQUAL or PRIVATE_KCT_ASSERTSTRUCTEQUAL</para></simplesect>
<simplesect kind="pre"><para><itemizedlist>
<listitem><para>message is of type char* (or a string); </para></listitem>
<listitem><para>type is a simple type; </para></listitem>
<listitem><para>conversion is a formatter string, like &quot;%d&quot;; </para></listitem>
<listitem><para>expected is a value of type type; </para></listitem>
<listitem><para>actual is a value of type type;</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[char*]message</parametername>
</parameternamelist>
<parameterdescription>
<para>represents a custom message to prepend to the error message; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>represents the type of expected and actual values; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conversion</parametername>
</parameternamelist>
<parameterdescription>
<para>represents the formatter string used to format the string representations of expected and actual; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected</parametername>
</parameternamelist>
<parameterdescription>
<para>the value that the developer expects to get; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>actual</parametername>
</parameternamelist>
<parameterdescription>
<para>the very value received </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="1100" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="1082" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1af768219fd2cb4519ca0e547289ea8f07" prot="public" static="no">
        <name>kct_assertEqualStructMsg</name>
        <param><defname>message</defname></param>
        <param><defname>type</defname></param>
        <param><defname>toStringFunction</defname></param>
        <param><defname>compareFunction</defname></param>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer>{ \
	type private_kct_variable_kct_assertEqualStructMsg_structexpected=expected; \
	type private_kct_variable_kct_assertEqualStructMsg_structactual=actual; \
	if (compareFunction(private_kct_variable_kct_assertEqualStructMsg_structexpected,private_kct_variable_kct_assertEqualStructMsg_structactual)!=0){ \
		char* private_kct_variable_kct_assertEqualStructMsg_str_exp=toStringFunction(structexpected); \
		char* private_kct_variable_kct_assertEqualStructMsg_str_act=toStringFunction(structactual); \
		<ref refid="KoldarCTester_8h_1a78e835cf42e2e31a9f35c3b81e42a785" kindref="member">PRIVATE_KCT_COMPOSESTRING</ref>(<ref refid="KoldarCTester_8h_1a60c5089114599af5f1714400c691fb05" kindref="member">currentTest</ref>-&gt;errorMessage, \
			message, \
			<ref refid="KoldarCTester_8h_1abcf6ba8376fc35ac65ce41fd3d0bfec1" kindref="member">PRIVATE_KCT_ERRORMESSAGE_EXPECTED</ref>, \
			private_kct_variable_kct_assertEqualStructMsg_str_exp, \
			<ref refid="KoldarCTester_8h_1ae96ea1c7ba8e936bb4272e0a24ac06b6" kindref="member">PRIVATE_KCT_ERRORMESSAGE_ACTUAL</ref>, \
			private_kct_variable_kct_assertEqualStructMsg_str_act); \
		<ref refid="KoldarCTester_8h_1aad99e877d917b72ee19c29b3acdc03de" kindref="member">PRIVATE_KCT_FREESTRING</ref>(private_kct_variable_kct_assertEqualStructMsg_str_exp); \
		<ref refid="KoldarCTester_8h_1aad99e877d917b72ee19c29b3acdc03de" kindref="member">PRIVATE_KCT_FREESTRING</ref>(private_kct_variable_kct_assertEqualStructMsg_str_act); \
		<ref refid="KoldarCTester_8h_1a4088943ed7c8cae2b853b402f29b4004" kindref="member">kct_fail</ref>(); \
	} \
}</initializer>
        <briefdescription>
<para>Checks if 2 structured data are equal. If not, send an error. </para>        </briefdescription>
        <detaileddescription>
<para>The function checks if 2 structure data are equal. If they are, nothing will happen. If not, the 2 values are converted in string and a error message is thrown at the user. The error is so composed:<orderedlist>
<listitem><para>message parameter;</para></listitem><listitem><para>KCT_ERRORMESSAGE_EXPECTED;</para></listitem><listitem><para>expected parameter converted into string;</para></listitem><listitem><para>KCT_ERRORMESSAGE_ACTUAL;</para></listitem><listitem><para>actual parameter converted into string;</para></listitem></orderedlist>
</para><para>The function can easily manage structure data (typedef struct). To do so, however, it needs 2 functions: <itemizedlist>
<listitem><para>a compare function: this function takes 2 structure value of the same type and checks if they are equal; if they are, the function returns 0, otherwise it returns a non zero value. Note that the function can be much complex than a equal/different function: like strcmp(), it might returns a negative number if the first struct has a less value than the second and/or a positive number if the first structure has a greater value than the second one. The important stuff is that it returns 0 if the 2 given structs are equal. </para></listitem>
<listitem><para>a string conversion functions: the function has to take only one parameter, the structure to stringify and must return a char*. Moreover, <bold>it must allocate a new string</bold>: this is mandatory because the function will automatically free the char pointer returned by the function.</para></listitem>
</itemizedlist>
<simplesect kind="warning"><para>{While primitive types can be inserted as values to be checked, the function can&apos;t compare them with ease. If you have to compare strings or structures, please use PRIVATE_KCT_ASSERTINTEQUAL or similar}</para></simplesect>
An example of the use of this function: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Point<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>Point;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Point2String(Point<sp/>p){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer=malloc(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buffer,</highlight><highlight class="stringliteral">&quot;(%d<sp/>%d)&quot;</highlight><highlight class="normal">,p.x,p.y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comparePoints(Point<sp/>p1,Point<sp/>p2){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p1.x!=p2.x){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p1.y!=p2.y){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testOK(){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point<sp/>px;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point<sp/>py;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px.x=5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px.y=4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py.x=5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py.y=5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="KoldarCTester_8h_1af768219fd2cb4519ca0e547289ea8f07" kindref="member" tooltip="Checks if 2 structured data are equal. If not, send an error.">kct_assertEqualStructMsg</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>2<sp/>points<sp/>are<sp/>different!&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point2String,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comparePoints,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="KoldarCTester_8h_1a5e05020cd2cbf6ef54e4abb4c5d3ca57" kindref="member" tooltip="adds a new function in the test list">kct_addTest</ref>(testOK);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="KoldarCTester_8h_1ac8a6b69e2336189f749c385c0f753bc6" kindref="member" tooltip="run all the test added to the test list.">kct_runAllTest</ref>(stdout);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>message is of type char* (or a string); </para></listitem>
<listitem><para>type is a struct type; </para></listitem>
<listitem><para>toStringFunction is a name of a declared function; </para></listitem>
<listitem><para>toStringFunction takes only one parameter of type &quot;type&quot;; </para></listitem>
<listitem><para>toStringFunction return a char*; </para></listitem>
<listitem><para>toStringFunction allocates a new string in the heap representing the struct given; </para></listitem>
<listitem><para>compareFunction is a name of a declared function; </para></listitem>
<listitem><para>compareFunction takes only 2 paramters of type &quot;type&quot;; </para></listitem>
<listitem><para>compareFunction returns 0 or another value; </para></listitem>
<listitem><para>compareFunction must return 0 if the 2 values are equal; </para></listitem>
<listitem><para>compareFunction must return any other value beside 0 if the 2 values are different; </para></listitem>
<listitem><para>expected is a value of type type; </para></listitem>
<listitem><para>actual is a value of type type;</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[char*]message</parametername>
</parameternamelist>
<parameterdescription>
<para>represents a custom message to prepend to the error message; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>represents the type of expected and actual values and the type of the parameters of the functions toStringFunction and compareFunction; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>toStringFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>represents the name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected</parametername>
</parameternamelist>
<parameterdescription>
<para>the value that the developer expects to get; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>actual</parametername>
</parameternamelist>
<parameterdescription>
<para>the very value received </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="1214" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="1198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a42cb8f2498583663010902a2646b8d9d" prot="public" static="no">
        <name>kct_assertNotEqualStructMsg</name>
        <param><defname>message</defname></param>
        <param><defname>type</defname></param>
        <param><defname>toStringFunction</defname></param>
        <param><defname>compareFunction</defname></param>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer>{ \
	type private_kct_variable_kct_assertEqualStructMsg_structexpected=expected; \
	type private_kct_variable_kct_assertEqualStructMsg_structactual=actual; \
	if (compareFunction(private_kct_variable_kct_assertEqualStructMsg_structexpected,private_kct_variable_kct_assertEqualStructMsg_structactual)==0){ \
		char* private_kct_variable_kct_assertEqualStructMsg_str_exp=toStringFunction(structexpected); \
		char* private_kct_variable_kct_assertEqualStructMsg_str_act=toStringFunction(structactual); \
		<ref refid="KoldarCTester_8h_1a78e835cf42e2e31a9f35c3b81e42a785" kindref="member">PRIVATE_KCT_COMPOSESTRING</ref>(<ref refid="KoldarCTester_8h_1a60c5089114599af5f1714400c691fb05" kindref="member">currentTest</ref>-&gt;errorMessage, \
			message, \
			<ref refid="KoldarCTester_8h_1abcf6ba8376fc35ac65ce41fd3d0bfec1" kindref="member">PRIVATE_KCT_ERRORMESSAGE_EXPECTED</ref>, \
			private_kct_variable_kct_assertEqualStructMsg_str_exp, \
			<ref refid="KoldarCTester_8h_1ae96ea1c7ba8e936bb4272e0a24ac06b6" kindref="member">PRIVATE_KCT_ERRORMESSAGE_ACTUAL</ref>, \
			private_kct_variable_kct_assertEqualStructMsg_str_act); \
		<ref refid="KoldarCTester_8h_1aad99e877d917b72ee19c29b3acdc03de" kindref="member">PRIVATE_KCT_FREESTRING</ref>(private_kct_variable_kct_assertEqualStructMsg_str_exp); \
		<ref refid="KoldarCTester_8h_1aad99e877d917b72ee19c29b3acdc03de" kindref="member">PRIVATE_KCT_FREESTRING</ref>(private_kct_variable_kct_assertEqualStructMsg_str_act); \
		<ref refid="KoldarCTester_8h_1a4088943ed7c8cae2b853b402f29b4004" kindref="member">kct_fail</ref>(); \
	} \
}</initializer>
        <briefdescription>
<para>Checks if 2 structured data are different. If not, send an error. </para>        </briefdescription>
        <detaileddescription>
<para>The function checks if 2 structure data are not equal. If they are, nothing will happen. If not, the 2 values are converted in string and a error message is thrown at the user. The error is so composed:<orderedlist>
<listitem><para>message parameter;</para></listitem><listitem><para>KCT_ERRORMESSAGE_EXPECTED;</para></listitem><listitem><para>expected parameter converted into string;</para></listitem><listitem><para>KCT_ERRORMESSAGE_ACTUAL;</para></listitem><listitem><para>actual parameter converted into string;</para></listitem></orderedlist>
</para><para>The function can easily manage structure data (typedef struct). To do so, however, it needs 2 functions: <itemizedlist>
<listitem><para>a compare function: this function takes 2 structure value of the same type and checks if they are equal; if they are, the function returns 0, otherwise it returns a non zero value. Note that the function can be much complex than a equal/different function: like strcmp(), it might returns a negative number if the first struct has a less value than the second and/or a positive number if the first structure has a greater value than the second one. The important stuff is that it returns 0 if the 2 given structs are equal. </para></listitem>
<listitem><para>a string conversion functions: the function has to take only one parameter, the structure to stringify and must return a char*. Moreover, <bold>it must allocate a new string</bold>: this is mandatory because the function will automatically free the char pointer returned by the function.</para></listitem>
</itemizedlist>
<simplesect kind="warning"><para>{While primitive types can be inserted as values to be checked, the function can&apos;t compare them with ease. If you have to compare strings or structures, please use PRIVATE_KCT_ASSERTINTEQUAL or similar}</para></simplesect>
An example of the use of this function: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Point<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>Point;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Point2String(Point<sp/>p){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer=malloc(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buffer,</highlight><highlight class="stringliteral">&quot;(%d<sp/>%d)&quot;</highlight><highlight class="normal">,p.x,p.y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comparePoints(Point<sp/>p1,Point<sp/>p2){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p1.x!=p2.x){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p1.y!=p2.y){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testOK(){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point<sp/>px;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point<sp/>py;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px.x=5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px.y=4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py.x=5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py.y=5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="KoldarCTester_8h_1a42cb8f2498583663010902a2646b8d9d" kindref="member" tooltip="Checks if 2 structured data are different. If not, send an error.">kct_assertNotEqualStructMsg</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>2<sp/>points<sp/>are<sp/>different!&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point2String,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comparePoints,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="KoldarCTester_8h_1a5e05020cd2cbf6ef54e4abb4c5d3ca57" kindref="member" tooltip="adds a new function in the test list">kct_addTest</ref>(testOK);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="KoldarCTester_8h_1ac8a6b69e2336189f749c385c0f753bc6" kindref="member" tooltip="run all the test added to the test list.">kct_runAllTest</ref>(stdout);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>message is of type char* (or a string); </para></listitem>
<listitem><para>type is a struct type; </para></listitem>
<listitem><para>toStringFunction is a name of a declared function; </para></listitem>
<listitem><para>toStringFunction takes only one parameter of type &quot;type&quot;; </para></listitem>
<listitem><para>toStringFunction return a char*; </para></listitem>
<listitem><para>toStringFunction allocates a new string in the heap representing the struct given; </para></listitem>
<listitem><para>compareFunction is a name of a declared function; </para></listitem>
<listitem><para>compareFunction takes only 2 paramters of type &quot;type&quot;; </para></listitem>
<listitem><para>compareFunction returns 0 or another value; </para></listitem>
<listitem><para>compareFunction must return 0 if the 2 values are equal; </para></listitem>
<listitem><para>compareFunction must return any other value beside 0 if the 2 values are different; </para></listitem>
<listitem><para>expected is a value of type type; </para></listitem>
<listitem><para>actual is a value of type type;</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[char*]message</parametername>
</parameternamelist>
<parameterdescription>
<para>represents a custom message to prepend to the error message; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>represents the type of expected and actual values and the type of the parameters of the functions toStringFunction and compareFunction; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>toStringFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>represents the name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected</parametername>
</parameternamelist>
<parameterdescription>
<para>the value that the developer expects to get; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>actual</parametername>
</parameternamelist>
<parameterdescription>
<para>the very value received </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="1328" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="1312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a8438378dbf37f64bd50cc68b6c698dc1" prot="public" static="no">
        <name>kct_assertEqualPtrMsg</name>
        <param><defname>message</defname></param>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer><ref refid="KoldarCTester_8h_1a7c6235260c2f0889936b8edda762db19" kindref="member">kct_assertEqualPrimitiveMsg</ref>(message,void*,&quot;%p&quot;,expected,actual)</initializer>
        <briefdescription>
<para>Checks if 2 pointers values are equal. If not, send an error. </para>        </briefdescription>
        <detaileddescription>
<para>The function checks if 2 pointers are equal. If they are, nothing will happen. If not, the 2 values are converted in string and a error message is thrown at the user. The error is so composed:<orderedlist>
<listitem><para>message parameter;</para></listitem><listitem><para>KCT_ERRORMESSAGE_EXPECTED;</para></listitem><listitem><para>expected parameter converted into string;</para></listitem><listitem><para>KCT_ERRORMESSAGE_ACTUAL;</para></listitem><listitem><para>actual parameter converted into string;</para></listitem></orderedlist>
</para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>message is of type char* (or a string); </para></listitem>
<listitem><para>expected is a value of type void* (or a relative of it); </para></listitem>
<listitem><para>actual is a value of type void* (or a relative of it);</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[char*]message</parametername>
</parameternamelist>
<parameterdescription>
<para>represents a custom message to prepend to the error message; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[void*]expected</parametername>
</parameternamelist>
<parameterdescription>
<para>the value that the developer expects to get; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[void*]actual</parametername>
</parameternamelist>
<parameterdescription>
<para>the very value received </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="1352" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="1351" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1afb48d44aa30b8baab5acea013b5a13ea" prot="public" static="no">
        <name>kct_assertNotEqualPtrMsg</name>
        <param><defname>message</defname></param>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer><ref refid="KoldarCTester_8h_1a8b6f1bb142ced3a6d64d6cb08889bf77" kindref="member">kct_assertNotEqualPrimitiveMsg</ref>(message,void*,&quot;%p&quot;,expected,actual)</initializer>
        <briefdescription>
<para>Checks if 2 pointer values are not equal. If not, send an error. </para>        </briefdescription>
        <detaileddescription>
<para>The function checks if 2 pointers are different. If they are, nothing will happen. If not, the 2 values are converted in string and a error message is thrown at the user. The error is so composed:<orderedlist>
<listitem><para>message parameter;</para></listitem><listitem><para>KCT_ERRORMESSAGE_EXPECTED;</para></listitem><listitem><para>expected parameter converted into string;</para></listitem><listitem><para>KCT_ERRORMESSAGE_ACTUAL;</para></listitem><listitem><para>actual parameter converted into string;</para></listitem></orderedlist>
</para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>message is of type char* (or a string); </para></listitem>
<listitem><para>expected is a value of type void* (or a relative of it); </para></listitem>
<listitem><para>actual is a value of type void* (or a relative of it);</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[char*]message</parametername>
</parameternamelist>
<parameterdescription>
<para>represents a custom message to prepend to the error message; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[void*]expected</parametername>
</parameternamelist>
<parameterdescription>
<para>the value that the developer expects to get; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[void*]actual</parametername>
</parameternamelist>
<parameterdescription>
<para>the very value received </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="1376" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="1375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a638a32401f29c641c36fd0113b1d5d54" prot="public" static="no">
        <name>kct_assertEqualIntMsg</name>
        <param><defname>message</defname></param>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer><ref refid="KoldarCTester_8h_1a7c6235260c2f0889936b8edda762db19" kindref="member">kct_assertEqualPrimitiveMsg</ref>(message,int,&quot;%d&quot;,expected,actual)</initializer>
        <briefdescription>
<para>Checks if 2 integer values are equal. If not, send an error. </para>        </briefdescription>
        <detaileddescription>
<para>The function checks if 2 integer are equal. If they are, nothing will happen. If not, the 2 values are converted in string and a error message is thrown at the user. The error is so composed:<orderedlist>
<listitem><para>message parameter;</para></listitem><listitem><para>KCT_ERRORMESSAGE_EXPECTED;</para></listitem><listitem><para>expected parameter converted into string;</para></listitem><listitem><para>KCT_ERRORMESSAGE_ACTUAL;</para></listitem><listitem><para>actual parameter converted into string;</para></listitem></orderedlist>
</para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>message is of type char* (or a string); </para></listitem>
<listitem><para>expected is a value of type int; </para></listitem>
<listitem><para>actual is a value of type int;</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[char*]message</parametername>
</parameternamelist>
<parameterdescription>
<para>represents a custom message to prepend to the error message; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[int]expected</parametername>
</parameternamelist>
<parameterdescription>
<para>the value that the developer expects to get; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[int]actual</parametername>
</parameternamelist>
<parameterdescription>
<para>the very value received </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="1400" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="1399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a74ece761545f783064298ae259827892" prot="public" static="no">
        <name>kct_assertNotEqualIntMsg</name>
        <param><defname>message</defname></param>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer><ref refid="KoldarCTester_8h_1a8b6f1bb142ced3a6d64d6cb08889bf77" kindref="member">kct_assertNotEqualPrimitiveMsg</ref>(message,int,&quot;%d&quot;,expected,actual)</initializer>
        <briefdescription>
<para>Checks if 2 integer values are not equal. If not, send an error. </para>        </briefdescription>
        <detaileddescription>
<para>The function checks if 2 integer are different. If they are, nothing will happen. If not, the 2 values are converted in string and a error message is thrown at the user. The error is so composed:<orderedlist>
<listitem><para>message parameter;</para></listitem><listitem><para>KCT_ERRORMESSAGE_EXPECTED;</para></listitem><listitem><para>expected parameter converted into string;</para></listitem><listitem><para>KCT_ERRORMESSAGE_ACTUAL;</para></listitem><listitem><para>actual parameter converted into string;</para></listitem></orderedlist>
</para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>message is of type char* (or a string); </para></listitem>
<listitem><para>expected is a value of type int; </para></listitem>
<listitem><para>actual is a value of type int;</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[char*]message</parametername>
</parameternamelist>
<parameterdescription>
<para>represents a custom message to prepend to the error message; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[int]expected</parametername>
</parameternamelist>
<parameterdescription>
<para>the value that the developer expects to get; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[int]actual</parametername>
</parameternamelist>
<parameterdescription>
<para>the very value received </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="1424" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="1423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a4fb6019e3502db5e5469766304128cd3" prot="public" static="no">
        <name>kct_assertEqualFloatMsg</name>
        <param><defname>message</defname></param>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer><ref refid="KoldarCTester_8h_1a7c6235260c2f0889936b8edda762db19" kindref="member">kct_assertEqualPrimitiveMsg</ref>(message,float,&quot;%2.3f&quot;,expected,actual)</initializer>
        <briefdescription>
<para>Checks if 2 float values are not equal. If not, send an error. </para>        </briefdescription>
        <detaileddescription>
<para>The function checks if 2 integer are equal. If they are, nothing will happen. If not, the 2 values are converted in string and a error message is thrown at the user. The error is so composed:<orderedlist>
<listitem><para>message parameter;</para></listitem><listitem><para>KCT_ERRORMESSAGE_EXPECTED;</para></listitem><listitem><para>expected parameter converted into string;</para></listitem><listitem><para>KCT_ERRORMESSAGE_ACTUAL;</para></listitem><listitem><para>actual parameter converted into string;</para></listitem></orderedlist>
</para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>message is of type char* (or a string); </para></listitem>
<listitem><para>expected is a value of type float; </para></listitem>
<listitem><para>actual is a value of type float;</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[char*]message</parametername>
</parameternamelist>
<parameterdescription>
<para>represents a custom message to prepend to the error message; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[float]expected</parametername>
</parameternamelist>
<parameterdescription>
<para>the value that the developer expects to get; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[float]actual</parametername>
</parameternamelist>
<parameterdescription>
<para>the very value received </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="1448" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="1447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a8c84ee7ffad95323e1504769aa320188" prot="public" static="no">
        <name>kct_assertNotEqualFloatMsg</name>
        <param><defname>message</defname></param>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer><ref refid="KoldarCTester_8h_1a8b6f1bb142ced3a6d64d6cb08889bf77" kindref="member">kct_assertNotEqualPrimitiveMsg</ref>(message,float,&quot;%2.3f&quot;,expected,actual)</initializer>
        <briefdescription>
<para>Checks if 2 float values are not equal. If not, send an error. </para>        </briefdescription>
        <detaileddescription>
<para>The function checks if 2 float are different. If they are, nothing will happen. If not, the 2 values are converted in string and a error message is thrown at the user. The error is so composed:<orderedlist>
<listitem><para>message parameter;</para></listitem><listitem><para>KCT_ERRORMESSAGE_EXPECTED;</para></listitem><listitem><para>expected parameter converted into string;</para></listitem><listitem><para>KCT_ERRORMESSAGE_ACTUAL;</para></listitem><listitem><para>actual parameter converted into string;</para></listitem></orderedlist>
</para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>message is of type char* (or a string); </para></listitem>
<listitem><para>expected is a value of type float; </para></listitem>
<listitem><para>actual is a value of type float;</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[char*]message</parametername>
</parameternamelist>
<parameterdescription>
<para>represents a custom message to prepend to the error message; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[float]expected</parametername>
</parameternamelist>
<parameterdescription>
<para>the value that the developer expects to get; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[float]actual</parametername>
</parameternamelist>
<parameterdescription>
<para>the very value received </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="1472" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="1471" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1ab4e6c61583ca8ac8951757b691081cdf" prot="public" static="no">
        <name>kct_assertIsNotNull</name>
        <param><defname>pointer</defname></param>
        <initializer>{ \
	void* private_kct_variable_kct_assertIsNotNull=(pointer); \
	if (private_kct_variable_kct_assertIsNotNull==NULL){ \
		<ref refid="KoldarCTester_8h_1a4088943ed7c8cae2b853b402f29b4004" kindref="member">kct_fail</ref>(); \
	} \
}</initializer>
        <briefdescription>
<para>test whether or not a pointer is NULL </para>        </briefdescription>
        <detaileddescription>
<para>The assertion checks if the pointer passed as parameter is NULL or not. Nothing will happen if pointer is a value different from 0.</para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>pointer is void* typed (or a relative of it);</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[void*]pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to test </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="1490" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="1485" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a5264879a5a7bec99330e05bbc284460c" prot="public" static="no">
        <name>kct_assertIsNotNullMsg</name>
        <param><defname>message</defname></param>
        <param><defname>pointer</defname></param>
        <initializer>{ \
	void* private_kct_variable_kct_assertIsNotNullMsg=(pointer); \
	if (private_kct_variable_kct_assertIsNotNullMsg==NULL){ \
		<ref refid="KoldarCTester_8h_1a711828fbdf116ebd2722f9aa48916832" kindref="member">kct_failMsg</ref>(message); \
	} \
}</initializer>
        <briefdescription>
<para>test whether or not a pointer is NULL </para>        </briefdescription>
        <detaileddescription>
<para>The assertion checks if the pointer passed as parameter is NULL or not. Nothing will happen if pointer is a value different from 0. The string message will be shown if the pointer is 0.</para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>pointer is void* typed (or a relative of it);</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[void*]pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to test </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="1509" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="1504" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a336d48b62a9bb572ac9bdad71f180fdf" prot="public" static="no">
        <name>kct_assertIsNull</name>
        <param><defname>pointer</defname></param>
        <initializer>{ \
	void* private_kct_variable_kct_assertIsNull=(pointer); \
	if (private_kct_variable_kct_assertIsNull!=NULL){ \
		<ref refid="KoldarCTester_8h_1a4088943ed7c8cae2b853b402f29b4004" kindref="member">kct_fail</ref>(); \
	}</initializer>
        <briefdescription>
<para>test whether or not a pointer is not NULL </para>        </briefdescription>
        <detaileddescription>
<para>The assertion checks if the pointer passed as parameter is not NULL. Nothing will happen if pointer is a value equal from 0.</para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>pointer is void* typed (or a relative of it);</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[void*]pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to test </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="1526" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="1522" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a453addaa537b7269312740f182c662d3" prot="public" static="no">
        <name>kct_assertIsNullMsg</name>
        <param><defname>message</defname></param>
        <param><defname>pointer</defname></param>
        <initializer>{ \
	void* private_kct_variable_kct_assertIsNullMsg=(pointer); \
	if (private_kct_variable_kct_assertIsNullMsg!=NULL){ \
		<ref refid="KoldarCTester_8h_1a711828fbdf116ebd2722f9aa48916832" kindref="member">kct_failMsg</ref>(message); \
	} \
}</initializer>
        <briefdescription>
<para>test whether or not a pointer is not NULL </para>        </briefdescription>
        <detaileddescription>
<para>The assertion checks if the pointer passed as parameter is not NULL. Nothing will happen if pointer is a value equal from 0. A message will be shown if the pointer is not NULL.</para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>pointer is void* typed (or a relative of it); </para></listitem>
<listitem><para>message must be char* typed;</para></listitem>
</itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[void*]pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to test </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[char*]message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to show if the pointer is not NULL </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="1547" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="1542" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a08a4d20689cf30769e52d07364dce17d" prot="public" static="no">
        <name>kct_assertExtremis</name>
        <param><defname>lowerbound</defname></param>
        <param><defname>upperbound</defname></param>
        <param><defname>lowin</defname></param>
        <param><defname>upin</defname></param>
        <param><defname>actual</defname></param>
        <initializer>{ \
	if (actual&lt;lowerbound){ \
		<ref refid="KoldarCTester_8h_1a4088943ed7c8cae2b853b402f29b4004" kindref="member">kct_fail</ref>(); \
	} \
	if (actual&gt;upperbound){ \
		<ref refid="KoldarCTester_8h_1a4088943ed7c8cae2b853b402f29b4004" kindref="member">kct_fail</ref>(); \
	} \
	if ((lowin==false)&amp;&amp;(actual==lowerbound)){ \
		<ref refid="KoldarCTester_8h_1a4088943ed7c8cae2b853b402f29b4004" kindref="member">kct_fail</ref>(); \
	} \
	if ((upin==false)&amp;&amp;(actual==upperbound)) { \
		<ref refid="KoldarCTester_8h_1a4088943ed7c8cae2b853b402f29b4004" kindref="member">kct_fail</ref>(); \
	}</initializer>
        <briefdescription>
<para>checks if a value is in a given interval </para>        </briefdescription>
        <detaileddescription>
<para>The assertion allows you to check if a value (integer of float it doesn&apos;t matter) is inside a certain interval. The macro supports all the type of interval:</para><para>-* both interval inf and sup are <bold>not</bold> included in the interval itself: for example 5 is not in the interval <formula id="0">$]3;5[$</formula> -* only the interval inf is included in the interval: for example 5 is in the interval <formula id="1">$[5;7[$</formula> -* only the interval sup is cinluded in the interval: for example 5 is in the interval <formula id="2">$]3;5]$</formula> -* both interval inf and sup are included in the interval: for example 5 is in the interval <formula id="3">$[3;5]$</formula></para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>lowerbound is an numeric (integer or float); </para></listitem>
<listitem><para>upperbound is an numeric (integer or float); </para></listitem>
<listitem><para>actualbound is an numeric (integer or float); </para></listitem>
<listitem><para>lowin is a bool; </para></listitem>
<listitem><para>upin is a bool; </para></listitem>
<listitem><para>lowerbound is a non randomic value (it is not a function who is not deterministic for example); </para></listitem>
<listitem><para>upperbound is a non randomic value (it is not a function who is not deterministic for example); </para></listitem>
<listitem><para>actualbound is a non randomic value (it is not a function who is not deterministic for example); </para></listitem>
<listitem><para>lowin is a non randomic value (it is not a function who is not deterministic for example); </para></listitem>
<listitem><para>upin is a non randomic value (it is not a function who is not deterministic for example);</para></listitem>
</itemizedlist>
The non randomic precondition is particular important: the macro will <bold>NOT</bold> behave correctly if you code: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="KoldarCTester_8h_1a08a4d20689cf30769e52d07364dce17d" kindref="member" tooltip="checks if a value is in a given interval">kct_assertExtremis</ref>(3,5,</highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight><highlight class="keyword">true</highlight><highlight class="normal">,rand()%6);<sp/></highlight><highlight class="comment">//wrong<sp/>way<sp/>to<sp/>do<sp/>it</highlight></codeline>
</programlisting></para></simplesect>
You shoudl do instead: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a=rand()%6;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="KoldarCTester_8h_1a08a4d20689cf30769e52d07364dce17d" kindref="member" tooltip="checks if a value is in a given interval">kct_assertExtremis</ref>(3,5,</highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight><highlight class="keyword">true</highlight><highlight class="normal">,a);<sp/></highlight><highlight class="comment">//correct<sp/>way<sp/>to<sp/>do<sp/>it</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lowerbound</parametername>
</parameternamelist>
<parameterdescription>
<para>the inf of interval </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upperbound</parametername>
</parameternamelist>
<parameterdescription>
<para>the sup of the interval </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lowin</parametername>
</parameternamelist>
<parameterdescription>
<para>TRUE if the inf is included in the interval </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upin</parametername>
</parameternamelist>
<parameterdescription>
<para>TRUE if the sup is included in the interval  the value to check if is contained between lowerbound and upperbound </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="1605" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="1593" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="KoldarCTester_8h_1a743f1b27b298d393541f57f3b6a0f19a" prot="public" static="no">
        <name>kct_assertExtremisMsg</name>
        <param><defname>message</defname></param>
        <param><defname>lowerbound</defname></param>
        <param><defname>upperbound</defname></param>
        <param><defname>lowin</defname></param>
        <param><defname>upin</defname></param>
        <param><defname>actual</defname></param>
        <initializer>if (actual&lt;lowerbound){ \
		<ref refid="KoldarCTester_8h_1a711828fbdf116ebd2722f9aa48916832" kindref="member">kct_failMsg</ref>(message); \
	} \
	if (actual&gt;upperbound){ \
		<ref refid="KoldarCTester_8h_1a711828fbdf116ebd2722f9aa48916832" kindref="member">kct_failMsg</ref>(message); \
	} \
	if ((lowin==false)&amp;&amp;(actual==lowerbound)){ \
		<ref refid="KoldarCTester_8h_1a711828fbdf116ebd2722f9aa48916832" kindref="member">kct_failMsg</ref>(message); \
	} \
	if ((upin==false)&amp;&amp;(actual==upperbound)) { \
		<ref refid="KoldarCTester_8h_1a711828fbdf116ebd2722f9aa48916832" kindref="member">kct_failMsg</ref>(message); \
	}</initializer>
        <briefdescription>
<para>checks if a value is in a given interval </para>        </briefdescription>
        <detaileddescription>
<para>The assertion allows you to check if a value (integer of float it doesn&apos;t matter) is inside a certain interval. The macro supports all the type of interval:</para><para>-* both interval inf and sup are <bold>not</bold> included in the interval itself: for example 5 is not in the interval <formula id="0">$]3;5[$</formula> -* only the interval inf is included in the interval: for example 5 is in the interval <formula id="1">$[5;7[$</formula> -* only the interval sup is cinluded in the interval: for example 5 is in the interval <formula id="2">$]3;5]$</formula> -* both interval inf and sup are included in the interval: for example 5 is in the interval <formula id="3">$[3;5]$</formula></para><para><simplesect kind="pre"><para><itemizedlist>
<listitem><para>lowerbound is an numeric (integer or float); </para></listitem>
<listitem><para>upperbound is an numeric (integer or float); </para></listitem>
<listitem><para>actualbound is an numeric (integer or float); </para></listitem>
<listitem><para>lowin is a bool; </para></listitem>
<listitem><para>upin is a bool; </para></listitem>
<listitem><para>message is a char*; </para></listitem>
<listitem><para>lowerbound is a non randomic value (it is not a function who is not deterministic for example); </para></listitem>
<listitem><para>upperbound is a non randomic value (it is not a function who is not deterministic for example); </para></listitem>
<listitem><para>actualbound is a non randomic value (it is not a function who is not deterministic for example); </para></listitem>
<listitem><para>lowin is a non randomic value (it is not a function who is not deterministic for example); </para></listitem>
<listitem><para>upin is a non randomic value (it is not a function who is not deterministic for example);</para></listitem>
</itemizedlist>
The non randomic precondition is particular important: the macro will <bold>NOT</bold> behave correctly if you code: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="KoldarCTester_8h_1a08a4d20689cf30769e52d07364dce17d" kindref="member" tooltip="checks if a value is in a given interval">kct_assertExtremis</ref>(3,5,</highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight><highlight class="keyword">true</highlight><highlight class="normal">,rand()%6);<sp/></highlight><highlight class="comment">//wrong<sp/>way<sp/>to<sp/>do<sp/>it</highlight></codeline>
</programlisting></para></simplesect>
You shoudl do instead: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a=rand()%6;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="KoldarCTester_8h_1a08a4d20689cf30769e52d07364dce17d" kindref="member" tooltip="checks if a value is in a given interval">kct_assertExtremis</ref>(3,5,</highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight><highlight class="keyword">true</highlight><highlight class="normal">,a);<sp/></highlight><highlight class="comment">//correct<sp/>way<sp/>to<sp/>do<sp/>it</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[char*]message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to show if actual is not in the interval </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lowerbound</parametername>
</parameternamelist>
<parameterdescription>
<para>the inf of interval </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upperbound</parametername>
</parameternamelist>
<parameterdescription>
<para>the sup of the interval </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[bool]lowin</parametername>
</parameternamelist>
<parameterdescription>
<para>TRUE if the inf is included in the interval </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[bool]upin</parametername>
</parameternamelist>
<parameterdescription>
<para>TRUE if the sup is included in the interval  the value to check if is contained between lowerbound and upperbound </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="1665" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="1653" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="KoldarCTester_8h_1aa988ee461e7b20b71ccefb4e79ccfcbf" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* TestFunction)(void)</definition>
        <argsstring>)(void)</argsstring>
        <name>TestFunction</name>
        <briefdescription>
<para>type of a generic test function. </para>        </briefdescription>
        <detaileddescription>
<para>Every test function that has to be added as a test function must have the following prototype: -* no formal parameters; -* return type of type "void; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="420" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="KoldarCTester_8h_1aa212380198b0a2dca25d3d1018fad849" prot="public" static="no">
        <type>struct <ref refid="structTestListElement" kindref="compound">TestListElement</ref></type>
        <definition>typedef struct TestListElement  TestListElement</definition>
        <argsstring></argsstring>
        <name>TestListElement</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="459"/>
      </memberdef>
      <memberdef kind="typedef" id="KoldarCTester_8h_1acc89d326a9fedaf2a14a7ffe63469991" prot="public" static="no">
        <type>struct <ref refid="structTestList" kindref="compound">TestList</ref></type>
        <definition>typedef struct TestList  TestList</definition>
        <argsstring></argsstring>
        <name>TestList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="482"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="KoldarCTester_8h_1a44b6f03c5a8ee29e943e9ae44c4e5faa" prot="public" static="no" mutable="no">
        <type><ref refid="structTestList" kindref="compound">TestList</ref> *</type>
        <definition>TestList* testList</definition>
        <argsstring></argsstring>
        <name>testList</name>
        <initializer>NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents the list holding every test. This variable is used to simplify the MACRO prototype </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="833" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="833" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="KoldarCTester_8h_1a60c5089114599af5f1714400c691fb05" prot="public" static="no" mutable="no">
        <type><ref refid="structTestListElement" kindref="compound">TestListElement</ref> *</type>
        <definition>TestListElement* currentTest</definition>
        <argsstring></argsstring>
        <name>currentTest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents the test which is currently running </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" line="842" bodyfile="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h" bodystart="842" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="263"><highlight class="preprocessor">#ifndef<sp/>KOLDARCTESTER_H_</highlight></codeline>
<codeline lineno="264"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>KOLDARCTESTER_H_</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>as<sp/>suggested<sp/>in<sp/>the<sp/>gcc<sp/>manual<sp/>http://gcc.gnu.org/onlinedocs/gcc/Function-Names.html</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/>I<sp/>have<sp/>added<sp/>this<sp/>preprocessorn<sp/>commands<sp/>to<sp/>increase<sp/>portability<sp/>of<sp/>the<sp/>code<sp/>in<sp/>order</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/>to<sp/>get<sp/>a<sp/>function<sp/>name.</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__STDC_VERSION__<sp/>&lt;<sp/>199901L</highlight></codeline>
<codeline lineno="277"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>__GNUC__<sp/>&gt;=<sp/>2</highlight></codeline>
<codeline lineno="278"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>__func__<sp/>__FUNCTION__</highlight></codeline>
<codeline lineno="279"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>__func__<sp/>&quot;&lt;unknown&gt;&quot;</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>endif</highlight></codeline>
<codeline lineno="282"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="283"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="comment">//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">//@@@@@@@@@@@@@@@@@@@@@@@@@@@<sp/>CONTROL<sp/>MACRO<sp/>DEFINITIONS<sp/>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="preprocessor">#ifndef<sp/>KCT_CONTROLMACRO_TESTSEPARATOR</highlight></codeline>
<codeline lineno="306"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="310" refid="KoldarCTester_8h_1a8b4ceb7ab39cd5eee3485d8aa501ac69" refkind="member"><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>PRIVATE_KCT_TESTSEPARATOR<sp/>&quot;**************&quot;</highlight></codeline>
<codeline lineno="311"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="312"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>PRIVATE_KCT_TESTSEPARATOR<sp/>KCT_CONTROLMACRO_TESTSEPARATOR</highlight></codeline>
<codeline lineno="313"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="314"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="preprocessor">#ifndef<sp/>KCT_CONTROLMACRO_ERRORMESSAGE_EXPECTED</highlight></codeline>
<codeline lineno="337"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="345" refid="KoldarCTester_8h_1abcf6ba8376fc35ac65ce41fd3d0bfec1" refkind="member"><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>PRIVATE_KCT_ERRORMESSAGE_EXPECTED<sp/>&quot;\nExpected<sp/>value:<sp/>&quot;</highlight></codeline>
<codeline lineno="346"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="347"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>PRIVATE_KCT_ERRORMESSAGE_EXPECTED<sp/>KCT_CONTROLMACRO_ERRORMESSAGE_EXPECTED</highlight></codeline>
<codeline lineno="348"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="349"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="370"><highlight class="preprocessor">#ifndef<sp/>KCT_CONTROLMACRO_ERRORMESSAGE_ACTUAL</highlight></codeline>
<codeline lineno="371"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="379" refid="KoldarCTester_8h_1ae96ea1c7ba8e936bb4272e0a24ac06b6" refkind="member"><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>PRIVATE_KCT_ERRORMESSAGE_ACTUAL<sp/>&quot;\nActual<sp/>value:<sp/>&quot;</highlight></codeline>
<codeline lineno="380"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="381"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>PRIVATE_KCT_ERRORMESSAGE_ACTUAL<sp/>KCT_CONTROLMACRO_ERRORMESSAGE_ACTUAL</highlight></codeline>
<codeline lineno="382"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="383"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="399"><highlight class="preprocessor">#ifndef<sp/>KCT_CONTROLMACRO_STRINGBUFFER</highlight></codeline>
<codeline lineno="400"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="404" refid="KoldarCTester_8h_1a28c37c995e16de0ef2067f3269e2b8f1" refkind="member"><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>PRIVATE_KCT_STRINGBUFFER<sp/>15</highlight></codeline>
<codeline lineno="405"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="406"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>PRIVATE_KCT_STRINGBUFFER<sp/>KCT_CONTROLMACRO_STRINGBUFFER</highlight></codeline>
<codeline lineno="407"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="408"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//@@@@@@@@@@@@@@@@@@@@@@@@@@<sp/>STRUCTURES<sp/>DEFINITIONS<sp/>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="KoldarCTester_8h_1aa988ee461e7b20b71ccefb4e79ccfcbf" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="KoldarCTester_8h_1aa988ee461e7b20b71ccefb4e79ccfcbf" kindref="member" tooltip="type of a generic test function.">TestFunction</ref>)(void);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="427" refid="structTestListElement" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structTestListElement" kindref="compound" tooltip="Defines a single element of the list.">TestListElement</ref><sp/>{</highlight></codeline>
<codeline lineno="431" refid="structTestListElement_1a1548cde8fcea08f7502edcedf45eaea5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="KoldarCTester_8h_1aa988ee461e7b20b71ccefb4e79ccfcbf" kindref="member" tooltip="type of a generic test function.">TestFunction</ref><sp/><ref refid="structTestListElement_1a1548cde8fcea08f7502edcedf45eaea5" kindref="member" tooltip="the test case in the particular cell of the list">testFunction</ref>;</highlight></codeline>
<codeline lineno="435" refid="structTestListElement_1a9d7977e41f0e74d6ac372d248bbe23df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structTestListElement_1a9d7977e41f0e74d6ac372d248bbe23df" kindref="member" tooltip="points to a brief description of what the test does">description</ref>;</highlight></codeline>
<codeline lineno="442" refid="structTestListElement_1af1ac1303fdb0631c26c1c796bcdeb93b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structTestListElement_1af1ac1303fdb0631c26c1c796bcdeb93b" kindref="member" tooltip="represents the string to be filled with an error message.">errorMessage</ref>;</highlight></codeline>
<codeline lineno="449" refid="structTestListElement_1afc6f3d2eb2a6da34bf690f12c07b11dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="structTestListElement_1afc6f3d2eb2a6da34bf690f12c07b11dd" kindref="member" tooltip="holds the result of the test.">result</ref>;</highlight></codeline>
<codeline lineno="454" refid="structTestListElement_1aed8e6f8c8766aae69299fe2b8f951999" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structTestListElement_1aed8e6f8c8766aae69299fe2b8f951999" kindref="member" tooltip="controls whether or not you want to skip this test">skip</ref>;</highlight></codeline>
<codeline lineno="458" refid="structTestListElement_1a9c677e75182a00d31810530641ed942c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structTestListElement" kindref="compound" tooltip="Defines a single element of the list.">TestListElement</ref>*<sp/><ref refid="structTestListElement_1a9c677e75182a00d31810530641ed942c" kindref="member" tooltip="points to the next test function">next</ref>;</highlight></codeline>
<codeline lineno="459"><highlight class="normal">}<sp/><ref refid="structTestListElement" kindref="compound" tooltip="Defines a single element of the list.">TestListElement</ref>;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="466" refid="structTestList" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structTestList" kindref="compound" tooltip="Represents the entire list of test functions.">TestList</ref><sp/>{</highlight></codeline>
<codeline lineno="472" refid="structTestList_1a731a61bf04a73bc32bee5d9061bcc2af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structTestListElement" kindref="compound" tooltip="Defines a single element of the list.">TestListElement</ref>*<sp/><ref refid="structTestList_1a731a61bf04a73bc32bee5d9061bcc2af" kindref="member" tooltip="represents the first element of the list.">head</ref>;</highlight></codeline>
<codeline lineno="477" refid="structTestList_1aa66fa1d67e4be5ef572cda8f114732b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structTestListElement" kindref="compound" tooltip="Defines a single element of the list.">TestListElement</ref>*<sp/><ref refid="structTestList_1aa66fa1d67e4be5ef572cda8f114732b9" kindref="member" tooltip="represents the last element of the list.">tail</ref>;</highlight></codeline>
<codeline lineno="481" refid="structTestList_1a2a83f8e89d7e7446ffaad68a82e884b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structTestList_1a2a83f8e89d7e7446ffaad68a82e884b1" kindref="member" tooltip="the number of the total test functions in the list">size</ref>;</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}<sp/><ref refid="structTestList" kindref="compound" tooltip="Represents the entire list of test functions.">TestList</ref>;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment">//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<sp/>PRIVATE<sp/>MACRO<sp/>DEFINITIONS<sp/>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment">//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="492" refid="KoldarCTester_8h_1ab00769d769cf83d9deff75b96a040993" refkind="member"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_FAIL<sp/>0</highlight></codeline>
<codeline lineno="493"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="497" refid="KoldarCTester_8h_1aa4b3f93f586198c0a63749d74f34afd4" refkind="member"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_SUCCESS<sp/>1</highlight></codeline>
<codeline lineno="498"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="502" refid="KoldarCTester_8h_1ad838fa7c43ef0a11f89440526a32c5f3" refkind="member"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_SKIPPED<sp/>2</highlight></codeline>
<codeline lineno="503"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="507" refid="KoldarCTester_8h_1aca3d9dd0d02aa557315a4ea065e668f4" refkind="member"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_UNKNOWN<sp/>3</highlight></codeline>
<codeline lineno="508"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="526" refid="KoldarCTester_8h_1a6ce1deab2588c7f98556cba1cc0e798e" refkind="member"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_COPYSTRING(destinationpointer,constantString)<sp/>\</highlight></codeline>
<codeline lineno="527"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destinationpointer=malloc(strlen(constantString)+1);<sp/>\</highlight></codeline>
<codeline lineno="528"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(destinationpointer==NULL){<sp/>\</highlight></codeline>
<codeline lineno="529"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,&quot;MaxTester.h:PRIVATE_KCT_COPYSTRING:not<sp/>enough<sp/>memory\n&quot;);<sp/>\</highlight></codeline>
<codeline lineno="530"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>-1;<sp/>\</highlight></codeline>
<codeline lineno="531"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="532"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy((char*)destinationpointer,constantString)</highlight></codeline>
<codeline lineno="533"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="571" refid="KoldarCTester_8h_1a8f89a25a2d1603da8d1dd4ab7eb20582" refkind="member"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_INITSTRING(string,num,conversion)<sp/>\</highlight></codeline>
<codeline lineno="572"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string=malloc(PRIVATE_KCT_STRINGBUFFER);<sp/>\</highlight></codeline>
<codeline lineno="573"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(string,conversion,num);</highlight></codeline>
<codeline lineno="574"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="591" refid="KoldarCTester_8h_1aad99e877d917b72ee19c29b3acdc03de" refkind="member"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_FREESTRING(string)<sp/>\</highlight></codeline>
<codeline lineno="592"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(string);</highlight></codeline>
<codeline lineno="593"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="608" refid="KoldarCTester_8h_1a78e835cf42e2e31a9f35c3b81e42a785" refkind="member"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_COMPOSESTRING(destination,string1,string2,string3,string4,string5)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="609"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destination=malloc(1+strlen(string1)+strlen(string2)+strlen(string3)+strlen(string4)+strlen(string5));<sp/>\</highlight></codeline>
<codeline lineno="610"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(destination,string1);<sp/>\</highlight></codeline>
<codeline lineno="611"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(destination,string2);<sp/>\</highlight></codeline>
<codeline lineno="612"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(destination,string3);<sp/>\</highlight></codeline>
<codeline lineno="613"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(destination,string4);<sp/>\</highlight></codeline>
<codeline lineno="614"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(destination,string5);<sp/>\</highlight></codeline>
<codeline lineno="615"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="616"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="636" refid="KoldarCTester_8h_1a8e11e08dae8a81dd88ea867a2650f164" refkind="member"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_INITTESTLIST(list)<sp/>\</highlight></codeline>
<codeline lineno="637"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list=malloc(sizeof(TestList));<sp/>\</highlight></codeline>
<codeline lineno="638"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(list==NULL){<sp/>\</highlight></codeline>
<codeline lineno="639"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,&quot;MaxTester.c:initTestList:1:Not<sp/>enough<sp/>memory\n&quot;);<sp/>\</highlight></codeline>
<codeline lineno="640"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>-1;<sp/>\</highlight></codeline>
<codeline lineno="641"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="642"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list-&gt;head=NULL;<sp/>\</highlight></codeline>
<codeline lineno="643"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list-&gt;tail=NULL;<sp/>\</highlight></codeline>
<codeline lineno="644"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list-&gt;size=0</highlight></codeline>
<codeline lineno="645"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="666" refid="KoldarCTester_8h_1a80ef5404b6dbbc96e005228ead0fc158" refkind="member"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_INITTESTLISTELEMENT(element,_function,_description,toberun)<sp/>\</highlight></codeline>
<codeline lineno="667"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element=malloc(sizeof(TestListElement));<sp/>\</highlight></codeline>
<codeline lineno="668"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(element==NULL){<sp/>\</highlight></codeline>
<codeline lineno="669"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,&quot;KoldarCTester.h:PRIVATE_KCT_INITTESTLISTELEMENT:not<sp/>enough<sp/>memory&quot;);<sp/>\</highlight></codeline>
<codeline lineno="670"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>-1;<sp/>\</highlight></codeline>
<codeline lineno="671"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="672"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element-&gt;testFunction=_function;<sp/>\</highlight></codeline>
<codeline lineno="673"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_COPYSTRING(element-&gt;description,_description);<sp/>\</highlight></codeline>
<codeline lineno="674"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element-&gt;errorMessage=NULL;<sp/>\</highlight></codeline>
<codeline lineno="675"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element-&gt;result=PRIVATE_KCT_UNKNOWN;<sp/>\</highlight></codeline>
<codeline lineno="676"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element-&gt;skip=!toberun;<sp/>\</highlight></codeline>
<codeline lineno="677"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element-&gt;next=NULL</highlight></codeline>
<codeline lineno="678"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="702" refid="KoldarCTester_8h_1ade3d8352d0d6048762450c2a7627f0c0" refkind="member"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_ADDTESTCASE(_list,_test,_description,_toberun)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="703"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestListElement*<sp/>newadd;<sp/>\</highlight></codeline>
<codeline lineno="704"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_INITTESTLISTELEMENT(newadd,_test,_description,_toberun);<sp/>\</highlight></codeline>
<codeline lineno="705"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_list-&gt;head==NULL){<sp/>\</highlight></codeline>
<codeline lineno="706"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_list-&gt;head=newadd;<sp/>\</highlight></codeline>
<codeline lineno="707"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_list-&gt;tail=newadd;<sp/>\</highlight></codeline>
<codeline lineno="708"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="709"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_list-&gt;tail-&gt;next=newadd;<sp/>\</highlight></codeline>
<codeline lineno="710"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_list-&gt;tail=newadd;<sp/>\</highlight></codeline>
<codeline lineno="711"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="712"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_list-&gt;size++;<sp/>\</highlight></codeline>
<codeline lineno="713"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="714"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="726" refid="KoldarCTester_8h_1a34a2fcc3214b6281c924261e1745e80c" refkind="member"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_FREETESTLIST(_list)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="727"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestListElement*<sp/>tofree=_list-&gt;head;<sp/>\</highlight></codeline>
<codeline lineno="728"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestListElement*<sp/>next;<sp/>\</highlight></codeline>
<codeline lineno="729"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(tofree!=NULL){<sp/>\</highlight></codeline>
<codeline lineno="730"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next=tofree-&gt;next;<sp/>\</highlight></codeline>
<codeline lineno="731"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free((char*)tofree-&gt;description);<sp/>\</highlight></codeline>
<codeline lineno="732"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free((char*)tofree-&gt;errorMessage);<sp/>\</highlight></codeline>
<codeline lineno="733"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(tofree);<sp/>\</highlight></codeline>
<codeline lineno="734"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tofree=next;<sp/>\</highlight></codeline>
<codeline lineno="735"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="736"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(_list);<sp/>\</highlight></codeline>
<codeline lineno="737"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="738"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="757" refid="KoldarCTester_8h_1aab3cd05e31c5338e1ff39b821819280d" refkind="member"><highlight class="preprocessor">#define<sp/>PRIVATE_KCT_RUNALLTEST(_f,_list,_postDelete)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="758"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestListElement*<sp/>testToRun=_list-&gt;head;<sp/>\</highlight></codeline>
<codeline lineno="759"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>testnumber;<sp/>\</highlight></codeline>
<codeline lineno="760"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>oktest;<sp/>\</highlight></codeline>
<codeline lineno="761"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>skiptest;<sp/>\</highlight></codeline>
<codeline lineno="762"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>failtest;<sp/>\</highlight></codeline>
<codeline lineno="763"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(testToRun!=NULL){<sp/>\</highlight></codeline>
<codeline lineno="764"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(testToRun-&gt;skip==true){<sp/>\</highlight></codeline>
<codeline lineno="765"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testToRun-&gt;result=PRIVATE_KCT_SKIPPED;<sp/>\</highlight></codeline>
<codeline lineno="766"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testToRun=testToRun-&gt;next;<sp/>\</highlight></codeline>
<codeline lineno="767"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>continue;<sp/>\</highlight></codeline>
<codeline lineno="768"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="769"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTest=testToRun;<sp/>\</highlight></codeline>
<codeline lineno="770"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;%s<sp/>TEST<sp/>\&quot;%s\&quot;<sp/>%s\n&quot;,PRIVATE_KCT_TESTSEPARATOR,testToRun-&gt;description,PRIVATE_KCT_TESTSEPARATOR);<sp/>\</highlight></codeline>
<codeline lineno="771"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;\n&quot;);<sp/>\</highlight></codeline>
<codeline lineno="772"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testToRun-&gt;testFunction();<sp/>\</highlight></codeline>
<codeline lineno="773"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(testToRun-&gt;result<sp/>==<sp/>PRIVATE_KCT_UNKNOWN){<sp/>\</highlight></codeline>
<codeline lineno="774"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testToRun-&gt;result=PRIVATE_KCT_SUCCESS;<sp/>\</highlight></codeline>
<codeline lineno="775"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="776"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;!!!ERROR!!!<sp/>%s\n&quot;,testToRun-&gt;errorMessage);<sp/>\</highlight></codeline>
<codeline lineno="777"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="778"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;\n&quot;);<sp/>\</highlight></codeline>
<codeline lineno="779"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testToRun=testToRun-&gt;next;<sp/>\</highlight></codeline>
<codeline lineno="780"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="781"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;%s<sp/>FINAL<sp/>RESULTS<sp/>%s\n&quot;,PRIVATE_KCT_TESTSEPARATOR,PRIVATE_KCT_TESTSEPARATOR);<sp/>\</highlight></codeline>
<codeline lineno="782"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;\n&quot;);<sp/>\</highlight></codeline>
<codeline lineno="783"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testToRun=_list-&gt;head;<sp/>\</highlight></codeline>
<codeline lineno="784"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testnumber=1;<sp/>\</highlight></codeline>
<codeline lineno="785"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oktest=0;<sp/>\</highlight></codeline>
<codeline lineno="786"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failtest=0;<sp/>\</highlight></codeline>
<codeline lineno="787"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skiptest=0;<sp/>\</highlight></codeline>
<codeline lineno="788"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(testToRun!=NULL){<sp/>\</highlight></codeline>
<codeline lineno="789"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;%i)<sp/>%s\t&quot;,testnumber,testToRun-&gt;description);<sp/>\</highlight></codeline>
<codeline lineno="790"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(testToRun-&gt;result){<sp/>\</highlight></codeline>
<codeline lineno="791"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PRIVATE_KCT_SUCCESS:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="792"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;SUCCESS&quot;);<sp/>\</highlight></codeline>
<codeline lineno="793"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oktest++;<sp/>\</highlight></codeline>
<codeline lineno="794"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="795"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="796"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PRIVATE_KCT_FAIL:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="797"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;FAIL&quot;);<sp/>\</highlight></codeline>
<codeline lineno="798"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failtest++;<sp/>\</highlight></codeline>
<codeline lineno="799"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="800"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="801"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PRIVATE_KCT_SKIPPED:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="802"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skiptest++;<sp/>\</highlight></codeline>
<codeline lineno="803"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;SKIPPED&quot;);<sp/>\</highlight></codeline>
<codeline lineno="804"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="805"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="806"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PRIVATE_KCT_UNKNOWN:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="807"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;UNKNOWN&quot;);<sp/>\</highlight></codeline>
<codeline lineno="808"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="809"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="810"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="811"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;\n&quot;);<sp/>\</highlight></codeline>
<codeline lineno="812"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testToRun=testToRun-&gt;next;<sp/>\</highlight></codeline>
<codeline lineno="813"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testnumber++;<sp/>\</highlight></codeline>
<codeline lineno="814"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="815"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;\n&quot;);<sp/>\</highlight></codeline>
<codeline lineno="816"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;OK\t%d/%d<sp/>%%run<sp/>%2.3f\n&quot;,oktest,_list-&gt;size,(oktest*100.00)/(_list-&gt;size-skiptest));<sp/>\</highlight></codeline>
<codeline lineno="817"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;FAIL\t%d/%d<sp/>%%run<sp/>%2.3f\n&quot;,failtest,_list-&gt;size,(failtest*100.00)/(_list-&gt;size-skiptest));<sp/>\</highlight></codeline>
<codeline lineno="818"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(_f,&quot;SKIPPED\t%d/%d\n&quot;,skiptest,_list-&gt;size);<sp/>\</highlight></codeline>
<codeline lineno="819"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_postDelete){<sp/>\</highlight></codeline>
<codeline lineno="820"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_FREETESTLIST(_list);<sp/>\</highlight></codeline>
<codeline lineno="821"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_list=NULL;<sp/>\</highlight></codeline>
<codeline lineno="822"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="823"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="824"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="comment">//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="comment">//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<sp/>VARIABLE<sp/>USED<sp/>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="comment">//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="833" refid="KoldarCTester_8h_1a44b6f03c5a8ee29e943e9ae44c4e5faa" refkind="member"><highlight class="normal"><ref refid="structTestList" kindref="compound" tooltip="Represents the entire list of test functions.">TestList</ref>*<sp/><ref refid="KoldarCTester_8h_1a44b6f03c5a8ee29e943e9ae44c4e5faa" kindref="member">testList</ref>=NULL;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="comment">/*FIXME<sp/>this<sp/>variable<sp/>prevents<sp/>you<sp/>to<sp/>create<sp/>multiple<sp/>lists:</highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/>*<sp/>if<sp/>you<sp/>have<sp/>2<sp/>parallel<sp/>executing<sp/>lists,<sp/>with<sp/>this<sp/>variable<sp/>you<sp/>can&apos;t<sp/>obvously<sp/>keep</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/>*<sp/>trace<sp/>on<sp/>what<sp/>test<sp/>the<sp/>2<sp/>lists<sp/>are<sp/>executing!</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="842" refid="KoldarCTester_8h_1a60c5089114599af5f1714400c691fb05" refkind="member"><highlight class="normal"><ref refid="structTestListElement" kindref="compound" tooltip="Defines a single element of the list.">TestListElement</ref>*<sp/><ref refid="KoldarCTester_8h_1a60c5089114599af5f1714400c691fb05" kindref="member">currentTest</ref>;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="comment">//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="comment">//@@@@@@@@@@@@@@@@@@@@@@@@@@@<sp/>PUBLIC<sp/>MACRO<sp/>DEFINITIONS<sp/>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="comment">//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="863" refid="KoldarCTester_8h_1a8b21af1302fae84b59f07b2b8964a64e" refkind="member"><highlight class="preprocessor">#define<sp/>kct_addTestImproved(function,torun)<sp/>\</highlight></codeline>
<codeline lineno="864"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(testList==NULL){<sp/>\</highlight></codeline>
<codeline lineno="865"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_INITTESTLIST(testList);<sp/>\</highlight></codeline>
<codeline lineno="866"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="867"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_ADDTESTCASE(testList,function,#function,torun)</highlight></codeline>
<codeline lineno="868"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="881" refid="KoldarCTester_8h_1a5e05020cd2cbf6ef54e4abb4c5d3ca57" refkind="member"><highlight class="preprocessor">#define<sp/>kct_addTest(function)<sp/>\</highlight></codeline>
<codeline lineno="882"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_addTestImproved(function,true)</highlight></codeline>
<codeline lineno="883"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="899" refid="KoldarCTester_8h_1ac8a6b69e2336189f749c385c0f753bc6" refkind="member"><highlight class="preprocessor">#define<sp/>kct_runAllTest(outputfile)<sp/>\</highlight></codeline>
<codeline lineno="900"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_RUNALLTEST(outputfile,testList,true)</highlight></codeline>
<codeline lineno="901"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="comment">//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="comment">//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<sp/>ASSERTION<sp/>MACROS<sp/>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="comment">//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="911" refid="KoldarCTester_8h_1a4088943ed7c8cae2b853b402f29b4004" refkind="member"><highlight class="preprocessor">#define<sp/>kct_fail()<sp/>\</highlight></codeline>
<codeline lineno="912"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTest-&gt;result=PRIVATE_KCT_FAIL;<sp/>\</highlight></codeline>
<codeline lineno="913"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="914"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="922" refid="KoldarCTester_8h_1a711828fbdf116ebd2722f9aa48916832" refkind="member"><highlight class="preprocessor">#define<sp/>kct_failMsg(message)<sp/>\</highlight></codeline>
<codeline lineno="923"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_COPYSTRING(currentTest-&gt;errorMessage,message);<sp/>\</highlight></codeline>
<codeline lineno="924"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTest-&gt;result=PRIVATE_KCT_FAIL;<sp/>\</highlight></codeline>
<codeline lineno="925"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="926"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="931" refid="KoldarCTester_8h_1a8497b72e092de90ddde2ebf2aad987ca" refkind="member"><highlight class="preprocessor">#define<sp/>kct_ok()<sp/>\</highlight></codeline>
<codeline lineno="932"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="933"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="939" refid="KoldarCTester_8h_1ab47b71b14664ccf62a03056bf6afd299" refkind="member"><highlight class="preprocessor">#define<sp/>kct_assertCondition(condition)<sp/>\</highlight></codeline>
<codeline lineno="940"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((condition)==false){<sp/>\</highlight></codeline>
<codeline lineno="941"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_fail();<sp/>\</highlight></codeline>
<codeline lineno="942"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="954" refid="KoldarCTester_8h_1ab8d7d3073507383a0ab0913ebdce4a10" refkind="member"><highlight class="preprocessor">#define<sp/>kct_assertConditionMsg(message,condition)<sp/>\</highlight></codeline>
<codeline lineno="955"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((condition)==false){<sp/>\</highlight></codeline>
<codeline lineno="956"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_failMsg(message);<sp/>\</highlight></codeline>
<codeline lineno="957"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="958"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="964" refid="KoldarCTester_8h_1a97bd5c75a68868a4e449fa6d2abd7bd8" refkind="member"><highlight class="preprocessor">#define<sp/>kct_assertNotCondition(condition)<sp/>\</highlight></codeline>
<codeline lineno="965"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((condition)==true){<sp/>\</highlight></codeline>
<codeline lineno="966"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_fail();<sp/>\</highlight></codeline>
<codeline lineno="967"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="968"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="979" refid="KoldarCTester_8h_1ac1eb638d5f665bf8b99147c08db85788" refkind="member"><highlight class="preprocessor">#define<sp/>kct_assertNotConditionMsg(message,condition)<sp/>\</highlight></codeline>
<codeline lineno="980"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((condtion)==true){<sp/>\</highlight></codeline>
<codeline lineno="981"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_failMsg(message);<sp/>\</highlight></codeline>
<codeline lineno="982"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="983"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1023" refid="KoldarCTester_8h_1a7c6235260c2f0889936b8edda762db19" refkind="member"><highlight class="preprocessor">#define<sp/>kct_assertEqualPrimitiveMsg(message,type,conversion,expected,actual)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1024"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>private_kct_variable_kct_assertEqualPrimitiveMsg_intexpected=(expected);<sp/>\</highlight></codeline>
<codeline lineno="1025"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>private_kct_variable_kct_assertEqualPrimitiveMsg_intactual=(actual);<sp/>\</highlight></codeline>
<codeline lineno="1026"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((private_kct_variable_kct_assertEqualPrimitiveMsg_intactual)!=(private_kct_variable_kct_assertEqualPrimitiveMsg_intexpected)){<sp/>\</highlight></codeline>
<codeline lineno="1027"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char*<sp/>private_kct_variable_kct_assertEqualPrimitiveMsg_str_exp;<sp/>\</highlight></codeline>
<codeline lineno="1028"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char*<sp/>private_kct_variable_kct_assertEqualPrimitiveMsg_str_act;<sp/>\</highlight></codeline>
<codeline lineno="1029"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_INITSTRING(private_kct_variable_kct_assertEqualPrimitiveMsg_str_exp,private_kct_variable_kct_assertEqualPrimitiveMsg_intexpected,conversion);<sp/>\</highlight></codeline>
<codeline lineno="1030"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_INITSTRING(private_kct_variable_kct_assertEqualPrimitiveMsg_str_act,private_kct_variable_kct_assertEqualPrimitiveMsg_intactual,conversion);<sp/>\</highlight></codeline>
<codeline lineno="1031"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_COMPOSESTRING(currentTest-&gt;errorMessage,<sp/>\</highlight></codeline>
<codeline lineno="1032"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message,<sp/>\</highlight></codeline>
<codeline lineno="1033"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_ERRORMESSAGE_EXPECTED,<sp/>\</highlight></codeline>
<codeline lineno="1034"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>private_kct_variable_kct_assertEqualPrimitiveMsg_str_exp,<sp/>\</highlight></codeline>
<codeline lineno="1035"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_ERRORMESSAGE_ACTUAL,<sp/>\</highlight></codeline>
<codeline lineno="1036"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>private_kct_variable_kct_assertEqualPrimitiveMsg_str_act);<sp/>\</highlight></codeline>
<codeline lineno="1037"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_FREESTRING(private_kct_variable_kct_assertEqualPrimitiveMsg_str_exp);<sp/>\</highlight></codeline>
<codeline lineno="1038"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_FREESTRING(private_kct_variable_kct_assertEqualPrimitiveMsg_str_act);<sp/>\</highlight></codeline>
<codeline lineno="1039"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_fail();<sp/>\</highlight></codeline>
<codeline lineno="1040"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1041"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="1042"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1082" refid="KoldarCTester_8h_1a8b6f1bb142ced3a6d64d6cb08889bf77" refkind="member"><highlight class="preprocessor">#define<sp/>kct_assertNotEqualPrimitiveMsg(message,type,conversion,expected,actual)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1083"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>private_kct_variable_kct_assertNotEqualPrimitiveMsg_intexpected=(expected);<sp/>\</highlight></codeline>
<codeline lineno="1084"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>private_kct_variable_kct_assertNotEqualPrimitiveMsg_intactual=(actual);<sp/>\</highlight></codeline>
<codeline lineno="1085"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((private_kct_variable_kct_assertNotEqualPrimitiveMsg_intactual)==(private_kct_variable_kct_assertNotEqualPrimitiveMsg_intexpected)){<sp/>\</highlight></codeline>
<codeline lineno="1086"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char*<sp/>private_kct_variable_kct_assertNotEqualPrimitiveMsg_str_exp;<sp/>\</highlight></codeline>
<codeline lineno="1087"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char*<sp/>private_kct_variable_kct_assertNotEqualPrimitiveMsg_str_act;<sp/>\</highlight></codeline>
<codeline lineno="1088"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_INITSTRING(private_kct_variable_kct_assertNotEqualPrimitiveMsg_str_exp,private_kct_variable_kct_assertNotEqualPrimitiveMsg_intexpected,conversion);<sp/>\</highlight></codeline>
<codeline lineno="1089"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_INITSTRING(private_kct_variable_kct_assertNotEqualPrimitiveMsg_str_act,private_kct_variable_kct_assertNotEqualPrimitiveMsg_intactual,conversion);<sp/>\</highlight></codeline>
<codeline lineno="1090"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_COMPOSESTRING(currentTest-&gt;errorMessage,<sp/>\</highlight></codeline>
<codeline lineno="1091"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message,<sp/>\</highlight></codeline>
<codeline lineno="1092"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_ERRORMESSAGE_EXPECTED,<sp/>\</highlight></codeline>
<codeline lineno="1093"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>private_kct_variable_kct_assertNotEqualPrimitiveMsg_str_exp,<sp/>\</highlight></codeline>
<codeline lineno="1094"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_ERRORMESSAGE_ACTUAL,<sp/>\</highlight></codeline>
<codeline lineno="1095"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>private_kct_variable_kct_assertNotEqualPrimitiveMsg_str_act);<sp/>\</highlight></codeline>
<codeline lineno="1096"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_FREESTRING(private_kct_variable_kct_assertNotEqualPrimitiveMsg_str_exp);<sp/>\</highlight></codeline>
<codeline lineno="1097"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_FREESTRING(private_kct_variable_kct_assertNotEqualPrimitiveMsg_str_act);<sp/>\</highlight></codeline>
<codeline lineno="1098"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_fail();<sp/>\</highlight></codeline>
<codeline lineno="1099"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1100"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="1101"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1198" refid="KoldarCTester_8h_1af768219fd2cb4519ca0e547289ea8f07" refkind="member"><highlight class="preprocessor">#define<sp/>kct_assertEqualStructMsg(message,type,toStringFunction,compareFunction,expected,actual)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>private_kct_variable_kct_assertEqualStructMsg_structexpected=expected;<sp/>\</highlight></codeline>
<codeline lineno="1200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>private_kct_variable_kct_assertEqualStructMsg_structactual=actual;<sp/>\</highlight></codeline>
<codeline lineno="1201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(compareFunction(private_kct_variable_kct_assertEqualStructMsg_structexpected,private_kct_variable_kct_assertEqualStructMsg_structactual)!=0){<sp/>\</highlight></codeline>
<codeline lineno="1202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char*<sp/>private_kct_variable_kct_assertEqualStructMsg_str_exp=toStringFunction(structexpected);<sp/>\</highlight></codeline>
<codeline lineno="1203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char*<sp/>private_kct_variable_kct_assertEqualStructMsg_str_act=toStringFunction(structactual);<sp/>\</highlight></codeline>
<codeline lineno="1204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_COMPOSESTRING(currentTest-&gt;errorMessage,<sp/>\</highlight></codeline>
<codeline lineno="1205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message,<sp/>\</highlight></codeline>
<codeline lineno="1206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_ERRORMESSAGE_EXPECTED,<sp/>\</highlight></codeline>
<codeline lineno="1207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>private_kct_variable_kct_assertEqualStructMsg_str_exp,<sp/>\</highlight></codeline>
<codeline lineno="1208"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_ERRORMESSAGE_ACTUAL,<sp/>\</highlight></codeline>
<codeline lineno="1209"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>private_kct_variable_kct_assertEqualStructMsg_str_act);<sp/>\</highlight></codeline>
<codeline lineno="1210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_FREESTRING(private_kct_variable_kct_assertEqualStructMsg_str_exp);<sp/>\</highlight></codeline>
<codeline lineno="1211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_FREESTRING(private_kct_variable_kct_assertEqualStructMsg_str_act);<sp/>\</highlight></codeline>
<codeline lineno="1212"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_fail();<sp/>\</highlight></codeline>
<codeline lineno="1213"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1214"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="1215"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1312" refid="KoldarCTester_8h_1a42cb8f2498583663010902a2646b8d9d" refkind="member"><highlight class="preprocessor">#define<sp/>kct_assertNotEqualStructMsg(message,type,toStringFunction,compareFunction,expected,actual)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1313"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>private_kct_variable_kct_assertEqualStructMsg_structexpected=expected;<sp/>\</highlight></codeline>
<codeline lineno="1314"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>private_kct_variable_kct_assertEqualStructMsg_structactual=actual;<sp/>\</highlight></codeline>
<codeline lineno="1315"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(compareFunction(private_kct_variable_kct_assertEqualStructMsg_structexpected,private_kct_variable_kct_assertEqualStructMsg_structactual)==0){<sp/>\</highlight></codeline>
<codeline lineno="1316"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char*<sp/>private_kct_variable_kct_assertEqualStructMsg_str_exp=toStringFunction(structexpected);<sp/>\</highlight></codeline>
<codeline lineno="1317"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char*<sp/>private_kct_variable_kct_assertEqualStructMsg_str_act=toStringFunction(structactual);<sp/>\</highlight></codeline>
<codeline lineno="1318"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_COMPOSESTRING(currentTest-&gt;errorMessage,<sp/>\</highlight></codeline>
<codeline lineno="1319"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message,<sp/>\</highlight></codeline>
<codeline lineno="1320"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_ERRORMESSAGE_EXPECTED,<sp/>\</highlight></codeline>
<codeline lineno="1321"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>private_kct_variable_kct_assertEqualStructMsg_str_exp,<sp/>\</highlight></codeline>
<codeline lineno="1322"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_ERRORMESSAGE_ACTUAL,<sp/>\</highlight></codeline>
<codeline lineno="1323"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>private_kct_variable_kct_assertEqualStructMsg_str_act);<sp/>\</highlight></codeline>
<codeline lineno="1324"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_FREESTRING(private_kct_variable_kct_assertEqualStructMsg_str_exp);<sp/>\</highlight></codeline>
<codeline lineno="1325"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRIVATE_KCT_FREESTRING(private_kct_variable_kct_assertEqualStructMsg_str_act);<sp/>\</highlight></codeline>
<codeline lineno="1326"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_fail();<sp/>\</highlight></codeline>
<codeline lineno="1327"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1328"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="1329"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1351" refid="KoldarCTester_8h_1a8438378dbf37f64bd50cc68b6c698dc1" refkind="member"><highlight class="preprocessor">#define<sp/>kct_assertEqualPtrMsg(message,expected,actual)<sp/>\</highlight></codeline>
<codeline lineno="1352"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_assertEqualPrimitiveMsg(message,void*,&quot;%p&quot;,expected,actual)</highlight></codeline>
<codeline lineno="1353"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1375" refid="KoldarCTester_8h_1afb48d44aa30b8baab5acea013b5a13ea" refkind="member"><highlight class="preprocessor">#define<sp/>kct_assertNotEqualPtrMsg(message,expected,actual)<sp/>\</highlight></codeline>
<codeline lineno="1376"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_assertNotEqualPrimitiveMsg(message,void*,&quot;%p&quot;,expected,actual)</highlight></codeline>
<codeline lineno="1377"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1399" refid="KoldarCTester_8h_1a638a32401f29c641c36fd0113b1d5d54" refkind="member"><highlight class="preprocessor">#define<sp/>kct_assertEqualIntMsg(message,expected,actual)<sp/>\</highlight></codeline>
<codeline lineno="1400"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_assertEqualPrimitiveMsg(message,int,&quot;%d&quot;,expected,actual)</highlight></codeline>
<codeline lineno="1401"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1423" refid="KoldarCTester_8h_1a74ece761545f783064298ae259827892" refkind="member"><highlight class="preprocessor">#define<sp/>kct_assertNotEqualIntMsg(message,expected,actual)<sp/>\</highlight></codeline>
<codeline lineno="1424"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_assertNotEqualPrimitiveMsg(message,int,&quot;%d&quot;,expected,actual)</highlight></codeline>
<codeline lineno="1425"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1447" refid="KoldarCTester_8h_1a4fb6019e3502db5e5469766304128cd3" refkind="member"><highlight class="preprocessor">#define<sp/>kct_assertEqualFloatMsg(message,expected,actual)<sp/>\</highlight></codeline>
<codeline lineno="1448"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_assertEqualPrimitiveMsg(message,float,&quot;%2.3f&quot;,expected,actual)</highlight></codeline>
<codeline lineno="1449"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1471" refid="KoldarCTester_8h_1a8c84ee7ffad95323e1504769aa320188" refkind="member"><highlight class="preprocessor">#define<sp/>kct_assertNotEqualFloatMsg(message,expected,actual)<sp/>\</highlight></codeline>
<codeline lineno="1472"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_assertNotEqualPrimitiveMsg(message,float,&quot;%2.3f&quot;,expected,actual)</highlight></codeline>
<codeline lineno="1473"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1485" refid="KoldarCTester_8h_1ab4e6c61583ca8ac8951757b691081cdf" refkind="member"><highlight class="preprocessor">#define<sp/>kct_assertIsNotNull(pointer)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1486"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>private_kct_variable_kct_assertIsNotNull=(pointer);<sp/>\</highlight></codeline>
<codeline lineno="1487"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(private_kct_variable_kct_assertIsNotNull==NULL){<sp/>\</highlight></codeline>
<codeline lineno="1488"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_fail();<sp/>\</highlight></codeline>
<codeline lineno="1489"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1490"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="1491"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1504" refid="KoldarCTester_8h_1a5264879a5a7bec99330e05bbc284460c" refkind="member"><highlight class="preprocessor">#define<sp/>kct_assertIsNotNullMsg(message,pointer)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1505"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>private_kct_variable_kct_assertIsNotNullMsg=(pointer);<sp/>\</highlight></codeline>
<codeline lineno="1506"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(private_kct_variable_kct_assertIsNotNullMsg==NULL){<sp/>\</highlight></codeline>
<codeline lineno="1507"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_failMsg(message);<sp/>\</highlight></codeline>
<codeline lineno="1508"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1509"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="1510"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1522" refid="KoldarCTester_8h_1a336d48b62a9bb572ac9bdad71f180fdf" refkind="member"><highlight class="preprocessor">#define<sp/>kct_assertIsNull(pointer)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1523"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>private_kct_variable_kct_assertIsNull=(pointer);<sp/>\</highlight></codeline>
<codeline lineno="1524"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(private_kct_variable_kct_assertIsNull!=NULL){<sp/>\</highlight></codeline>
<codeline lineno="1525"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_fail();<sp/>\</highlight></codeline>
<codeline lineno="1526"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1527"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1542" refid="KoldarCTester_8h_1a453addaa537b7269312740f182c662d3" refkind="member"><highlight class="preprocessor">#define<sp/>kct_assertIsNullMsg(message,pointer)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1543"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>private_kct_variable_kct_assertIsNullMsg=(pointer);<sp/>\</highlight></codeline>
<codeline lineno="1544"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(private_kct_variable_kct_assertIsNullMsg!=NULL){<sp/>\</highlight></codeline>
<codeline lineno="1545"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_failMsg(message);<sp/>\</highlight></codeline>
<codeline lineno="1546"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1547"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="1548"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1593" refid="KoldarCTester_8h_1a08a4d20689cf30769e52d07364dce17d" refkind="member"><highlight class="preprocessor">#define<sp/>kct_assertExtremis(lowerbound,upperbound,lowin,upin,actual)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1594"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(actual&lt;lowerbound){<sp/>\</highlight></codeline>
<codeline lineno="1595"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_fail();<sp/>\</highlight></codeline>
<codeline lineno="1596"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1597"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(actual&gt;upperbound){<sp/>\</highlight></codeline>
<codeline lineno="1598"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_fail();<sp/>\</highlight></codeline>
<codeline lineno="1599"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1600"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((lowin==false)&amp;&amp;(actual==lowerbound)){<sp/>\</highlight></codeline>
<codeline lineno="1601"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_fail();<sp/>\</highlight></codeline>
<codeline lineno="1602"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1603"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((upin==false)&amp;&amp;(actual==upperbound))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1604"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_fail();<sp/>\</highlight></codeline>
<codeline lineno="1605"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1606"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1653" refid="KoldarCTester_8h_1a743f1b27b298d393541f57f3b6a0f19a" refkind="member"><highlight class="preprocessor">#define<sp/>kct_assertExtremisMsg(message,lowerbound,upperbound,lowin,upin,actual)<sp/>\</highlight></codeline>
<codeline lineno="1654"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(actual&lt;lowerbound){<sp/>\</highlight></codeline>
<codeline lineno="1655"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_failMsg(message);<sp/>\</highlight></codeline>
<codeline lineno="1656"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1657"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(actual&gt;upperbound){<sp/>\</highlight></codeline>
<codeline lineno="1658"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_failMsg(message);<sp/>\</highlight></codeline>
<codeline lineno="1659"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1660"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((lowin==false)&amp;&amp;(actual==lowerbound)){<sp/>\</highlight></codeline>
<codeline lineno="1661"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_failMsg(message);<sp/>\</highlight></codeline>
<codeline lineno="1662"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1663"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((upin==false)&amp;&amp;(actual==upperbound))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1664"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kct_failMsg(message);<sp/>\</highlight></codeline>
<codeline lineno="1665"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1666"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>KOLDARCTESTER_H_<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/media/DataDisk/Users/koldar/Documents/CC++/KoldarCTester/macro/KoldarCTester.h"/>
  </compounddef>
</doxygen>
